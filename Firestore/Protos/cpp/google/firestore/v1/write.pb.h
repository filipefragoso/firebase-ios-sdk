/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/write.proto

#ifndef PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fwrite_2eproto
#define PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fwrite_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/firestore/v1/common.pb.h"
#include "google/firestore/v1/document.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fwrite_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2ffirestore_2fv1_2fwrite_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2ffirestore_2fv1_2fwrite_2eproto();
namespace google {
namespace firestore {
namespace v1 {
class DocumentChange;
class DocumentChangeDefaultTypeInternal;
extern DocumentChangeDefaultTypeInternal _DocumentChange_default_instance_;
class DocumentDelete;
class DocumentDeleteDefaultTypeInternal;
extern DocumentDeleteDefaultTypeInternal _DocumentDelete_default_instance_;
class DocumentRemove;
class DocumentRemoveDefaultTypeInternal;
extern DocumentRemoveDefaultTypeInternal _DocumentRemove_default_instance_;
class DocumentTransform;
class DocumentTransformDefaultTypeInternal;
extern DocumentTransformDefaultTypeInternal _DocumentTransform_default_instance_;
class DocumentTransform_FieldTransform;
class DocumentTransform_FieldTransformDefaultTypeInternal;
extern DocumentTransform_FieldTransformDefaultTypeInternal _DocumentTransform_FieldTransform_default_instance_;
class ExistenceFilter;
class ExistenceFilterDefaultTypeInternal;
extern ExistenceFilterDefaultTypeInternal _ExistenceFilter_default_instance_;
class Write;
class WriteDefaultTypeInternal;
extern WriteDefaultTypeInternal _Write_default_instance_;
class WriteResult;
class WriteResultDefaultTypeInternal;
extern WriteResultDefaultTypeInternal _WriteResult_default_instance_;
}  // namespace v1
}  // namespace firestore
namespace protobuf {
template<> ::google::firestore::v1::DocumentChange* Arena::CreateMaybeMessage<::google::firestore::v1::DocumentChange>(Arena*);
template<> ::google::firestore::v1::DocumentDelete* Arena::CreateMaybeMessage<::google::firestore::v1::DocumentDelete>(Arena*);
template<> ::google::firestore::v1::DocumentRemove* Arena::CreateMaybeMessage<::google::firestore::v1::DocumentRemove>(Arena*);
template<> ::google::firestore::v1::DocumentTransform* Arena::CreateMaybeMessage<::google::firestore::v1::DocumentTransform>(Arena*);
template<> ::google::firestore::v1::DocumentTransform_FieldTransform* Arena::CreateMaybeMessage<::google::firestore::v1::DocumentTransform_FieldTransform>(Arena*);
template<> ::google::firestore::v1::ExistenceFilter* Arena::CreateMaybeMessage<::google::firestore::v1::ExistenceFilter>(Arena*);
template<> ::google::firestore::v1::Write* Arena::CreateMaybeMessage<::google::firestore::v1::Write>(Arena*);
template<> ::google::firestore::v1::WriteResult* Arena::CreateMaybeMessage<::google::firestore::v1::WriteResult>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace firestore {
namespace v1 {

enum DocumentTransform_FieldTransform_ServerValue {
  DocumentTransform_FieldTransform_ServerValue_SERVER_VALUE_UNSPECIFIED = 0,
  DocumentTransform_FieldTransform_ServerValue_REQUEST_TIME = 1,
  DocumentTransform_FieldTransform_ServerValue_DocumentTransform_FieldTransform_ServerValue_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DocumentTransform_FieldTransform_ServerValue_DocumentTransform_FieldTransform_ServerValue_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DocumentTransform_FieldTransform_ServerValue_IsValid(int value);
const DocumentTransform_FieldTransform_ServerValue DocumentTransform_FieldTransform_ServerValue_ServerValue_MIN = DocumentTransform_FieldTransform_ServerValue_SERVER_VALUE_UNSPECIFIED;
const DocumentTransform_FieldTransform_ServerValue DocumentTransform_FieldTransform_ServerValue_ServerValue_MAX = DocumentTransform_FieldTransform_ServerValue_REQUEST_TIME;
const int DocumentTransform_FieldTransform_ServerValue_ServerValue_ARRAYSIZE = DocumentTransform_FieldTransform_ServerValue_ServerValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* DocumentTransform_FieldTransform_ServerValue_descriptor();
inline const ::std::string& DocumentTransform_FieldTransform_ServerValue_Name(DocumentTransform_FieldTransform_ServerValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    DocumentTransform_FieldTransform_ServerValue_descriptor(), value);
}
inline bool DocumentTransform_FieldTransform_ServerValue_Parse(
    const ::std::string& name, DocumentTransform_FieldTransform_ServerValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DocumentTransform_FieldTransform_ServerValue>(
    DocumentTransform_FieldTransform_ServerValue_descriptor(), name, value);
}
// ===================================================================

class Write final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.Write) */ {
 public:
  Write();
  virtual ~Write();

  Write(const Write& from);

  inline Write& operator=(const Write& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Write(Write&& from) noexcept
    : Write() {
    *this = ::std::move(from);
  }

  inline Write& operator=(Write&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Write& default_instance();

  enum OperationCase {
    kUpdate = 1,
    kDelete = 2,
    kTransform = 6,
    OPERATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Write* internal_default_instance() {
    return reinterpret_cast<const Write*>(
               &_Write_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Write* other);
  friend void swap(Write& a, Write& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Write* New() const final {
    return CreateMaybeMessage<Write>(nullptr);
  }

  Write* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Write>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Write& from);
  void MergeFrom(const Write& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Write* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.firestore.v1.DocumentMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  const ::google::firestore::v1::DocumentMask& update_mask() const;
  ::google::firestore::v1::DocumentMask* release_update_mask();
  ::google::firestore::v1::DocumentMask* mutable_update_mask();
  void set_allocated_update_mask(::google::firestore::v1::DocumentMask* update_mask);

  // .google.firestore.v1.Precondition current_document = 4;
  bool has_current_document() const;
  void clear_current_document();
  static const int kCurrentDocumentFieldNumber = 4;
  const ::google::firestore::v1::Precondition& current_document() const;
  ::google::firestore::v1::Precondition* release_current_document();
  ::google::firestore::v1::Precondition* mutable_current_document();
  void set_allocated_current_document(::google::firestore::v1::Precondition* current_document);

  // .google.firestore.v1.Document update = 1;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 1;
  const ::google::firestore::v1::Document& update() const;
  ::google::firestore::v1::Document* release_update();
  ::google::firestore::v1::Document* mutable_update();
  void set_allocated_update(::google::firestore::v1::Document* update);

  // string delete = 2;
  private:
  bool has_delete_() const;
  public:
  void clear_delete_();
  static const int kDeleteFieldNumber = 2;
  const ::std::string& delete_() const;
  void set_delete_(const ::std::string& value);
  #if LANG_CXX11
  void set_delete_(::std::string&& value);
  #endif
  void set_delete_(const char* value);
  void set_delete_(const char* value, size_t size);
  ::std::string* mutable_delete_();
  ::std::string* release_delete_();
  void set_allocated_delete_(::std::string* delete_);

  // .google.firestore.v1.DocumentTransform transform = 6;
  bool has_transform() const;
  void clear_transform();
  static const int kTransformFieldNumber = 6;
  const ::google::firestore::v1::DocumentTransform& transform() const;
  ::google::firestore::v1::DocumentTransform* release_transform();
  ::google::firestore::v1::DocumentTransform* mutable_transform();
  void set_allocated_transform(::google::firestore::v1::DocumentTransform* transform);

  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.v1.Write)
 private:
  class HasBitSetters;
  void set_has_update();
  void set_has_delete_();
  void set_has_transform();

  inline bool has_operation() const;
  inline void clear_has_operation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::firestore::v1::DocumentMask* update_mask_;
  ::google::firestore::v1::Precondition* current_document_;
  union OperationUnion {
    OperationUnion() {}
    ::google::firestore::v1::Document* update_;
    ::google::protobuf::internal::ArenaStringPtr delete__;
    ::google::firestore::v1::DocumentTransform* transform_;
  } operation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2ffirestore_2fv1_2fwrite_2eproto;
};
// -------------------------------------------------------------------

class DocumentTransform_FieldTransform final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.DocumentTransform.FieldTransform) */ {
 public:
  DocumentTransform_FieldTransform();
  virtual ~DocumentTransform_FieldTransform();

  DocumentTransform_FieldTransform(const DocumentTransform_FieldTransform& from);

  inline DocumentTransform_FieldTransform& operator=(const DocumentTransform_FieldTransform& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentTransform_FieldTransform(DocumentTransform_FieldTransform&& from) noexcept
    : DocumentTransform_FieldTransform() {
    *this = ::std::move(from);
  }

  inline DocumentTransform_FieldTransform& operator=(DocumentTransform_FieldTransform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DocumentTransform_FieldTransform& default_instance();

  enum TransformTypeCase {
    kSetToServerValue = 2,
    kIncrement = 3,
    kMaximum = 4,
    kMinimum = 5,
    kAppendMissingElements = 6,
    kRemoveAllFromArray = 7,
    TRANSFORM_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentTransform_FieldTransform* internal_default_instance() {
    return reinterpret_cast<const DocumentTransform_FieldTransform*>(
               &_DocumentTransform_FieldTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DocumentTransform_FieldTransform* other);
  friend void swap(DocumentTransform_FieldTransform& a, DocumentTransform_FieldTransform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentTransform_FieldTransform* New() const final {
    return CreateMaybeMessage<DocumentTransform_FieldTransform>(nullptr);
  }

  DocumentTransform_FieldTransform* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DocumentTransform_FieldTransform>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DocumentTransform_FieldTransform& from);
  void MergeFrom(const DocumentTransform_FieldTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentTransform_FieldTransform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DocumentTransform_FieldTransform_ServerValue ServerValue;
  static const ServerValue SERVER_VALUE_UNSPECIFIED =
    DocumentTransform_FieldTransform_ServerValue_SERVER_VALUE_UNSPECIFIED;
  static const ServerValue REQUEST_TIME =
    DocumentTransform_FieldTransform_ServerValue_REQUEST_TIME;
  static inline bool ServerValue_IsValid(int value) {
    return DocumentTransform_FieldTransform_ServerValue_IsValid(value);
  }
  static const ServerValue ServerValue_MIN =
    DocumentTransform_FieldTransform_ServerValue_ServerValue_MIN;
  static const ServerValue ServerValue_MAX =
    DocumentTransform_FieldTransform_ServerValue_ServerValue_MAX;
  static const int ServerValue_ARRAYSIZE =
    DocumentTransform_FieldTransform_ServerValue_ServerValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerValue_descriptor() {
    return DocumentTransform_FieldTransform_ServerValue_descriptor();
  }
  static inline const ::std::string& ServerValue_Name(ServerValue value) {
    return DocumentTransform_FieldTransform_ServerValue_Name(value);
  }
  static inline bool ServerValue_Parse(const ::std::string& name,
      ServerValue* value) {
    return DocumentTransform_FieldTransform_ServerValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string field_path = 1;
  void clear_field_path();
  static const int kFieldPathFieldNumber = 1;
  const ::std::string& field_path() const;
  void set_field_path(const ::std::string& value);
  #if LANG_CXX11
  void set_field_path(::std::string&& value);
  #endif
  void set_field_path(const char* value);
  void set_field_path(const char* value, size_t size);
  ::std::string* mutable_field_path();
  ::std::string* release_field_path();
  void set_allocated_field_path(::std::string* field_path);

  // .google.firestore.v1.DocumentTransform.FieldTransform.ServerValue set_to_server_value = 2;
  private:
  bool has_set_to_server_value() const;
  public:
  void clear_set_to_server_value();
  static const int kSetToServerValueFieldNumber = 2;
  ::google::firestore::v1::DocumentTransform_FieldTransform_ServerValue set_to_server_value() const;
  void set_set_to_server_value(::google::firestore::v1::DocumentTransform_FieldTransform_ServerValue value);

  // .google.firestore.v1.Value increment = 3;
  bool has_increment() const;
  void clear_increment();
  static const int kIncrementFieldNumber = 3;
  const ::google::firestore::v1::Value& increment() const;
  ::google::firestore::v1::Value* release_increment();
  ::google::firestore::v1::Value* mutable_increment();
  void set_allocated_increment(::google::firestore::v1::Value* increment);

  // .google.firestore.v1.Value maximum = 4;
  bool has_maximum() const;
  void clear_maximum();
  static const int kMaximumFieldNumber = 4;
  const ::google::firestore::v1::Value& maximum() const;
  ::google::firestore::v1::Value* release_maximum();
  ::google::firestore::v1::Value* mutable_maximum();
  void set_allocated_maximum(::google::firestore::v1::Value* maximum);

  // .google.firestore.v1.Value minimum = 5;
  bool has_minimum() const;
  void clear_minimum();
  static const int kMinimumFieldNumber = 5;
  const ::google::firestore::v1::Value& minimum() const;
  ::google::firestore::v1::Value* release_minimum();
  ::google::firestore::v1::Value* mutable_minimum();
  void set_allocated_minimum(::google::firestore::v1::Value* minimum);

  // .google.firestore.v1.ArrayValue append_missing_elements = 6;
  bool has_append_missing_elements() const;
  void clear_append_missing_elements();
  static const int kAppendMissingElementsFieldNumber = 6;
  const ::google::firestore::v1::ArrayValue& append_missing_elements() const;
  ::google::firestore::v1::ArrayValue* release_append_missing_elements();
  ::google::firestore::v1::ArrayValue* mutable_append_missing_elements();
  void set_allocated_append_missing_elements(::google::firestore::v1::ArrayValue* append_missing_elements);

  // .google.firestore.v1.ArrayValue remove_all_from_array = 7;
  bool has_remove_all_from_array() const;
  void clear_remove_all_from_array();
  static const int kRemoveAllFromArrayFieldNumber = 7;
  const ::google::firestore::v1::ArrayValue& remove_all_from_array() const;
  ::google::firestore::v1::ArrayValue* release_remove_all_from_array();
  ::google::firestore::v1::ArrayValue* mutable_remove_all_from_array();
  void set_allocated_remove_all_from_array(::google::firestore::v1::ArrayValue* remove_all_from_array);

  void clear_transform_type();
  TransformTypeCase transform_type_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.v1.DocumentTransform.FieldTransform)
 private:
  class HasBitSetters;
  void set_has_set_to_server_value();
  void set_has_increment();
  void set_has_maximum();
  void set_has_minimum();
  void set_has_append_missing_elements();
  void set_has_remove_all_from_array();

  inline bool has_transform_type() const;
  inline void clear_has_transform_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_path_;
  union TransformTypeUnion {
    TransformTypeUnion() {}
    int set_to_server_value_;
    ::google::firestore::v1::Value* increment_;
    ::google::firestore::v1::Value* maximum_;
    ::google::firestore::v1::Value* minimum_;
    ::google::firestore::v1::ArrayValue* append_missing_elements_;
    ::google::firestore::v1::ArrayValue* remove_all_from_array_;
  } transform_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2ffirestore_2fv1_2fwrite_2eproto;
};
// -------------------------------------------------------------------

class DocumentTransform final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.DocumentTransform) */ {
 public:
  DocumentTransform();
  virtual ~DocumentTransform();

  DocumentTransform(const DocumentTransform& from);

  inline DocumentTransform& operator=(const DocumentTransform& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentTransform(DocumentTransform&& from) noexcept
    : DocumentTransform() {
    *this = ::std::move(from);
  }

  inline DocumentTransform& operator=(DocumentTransform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DocumentTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentTransform* internal_default_instance() {
    return reinterpret_cast<const DocumentTransform*>(
               &_DocumentTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DocumentTransform* other);
  friend void swap(DocumentTransform& a, DocumentTransform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentTransform* New() const final {
    return CreateMaybeMessage<DocumentTransform>(nullptr);
  }

  DocumentTransform* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DocumentTransform>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DocumentTransform& from);
  void MergeFrom(const DocumentTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentTransform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DocumentTransform_FieldTransform FieldTransform;

  // accessors -------------------------------------------------------

  // repeated .google.firestore.v1.DocumentTransform.FieldTransform field_transforms = 2;
  int field_transforms_size() const;
  void clear_field_transforms();
  static const int kFieldTransformsFieldNumber = 2;
  ::google::firestore::v1::DocumentTransform_FieldTransform* mutable_field_transforms(int index);
  ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::DocumentTransform_FieldTransform >*
      mutable_field_transforms();
  const ::google::firestore::v1::DocumentTransform_FieldTransform& field_transforms(int index) const;
  ::google::firestore::v1::DocumentTransform_FieldTransform* add_field_transforms();
  const ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::DocumentTransform_FieldTransform >&
      field_transforms() const;

  // string document = 1;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // @@protoc_insertion_point(class_scope:google.firestore.v1.DocumentTransform)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::DocumentTransform_FieldTransform > field_transforms_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fwrite_2eproto;
};
// -------------------------------------------------------------------

class WriteResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.WriteResult) */ {
 public:
  WriteResult();
  virtual ~WriteResult();

  WriteResult(const WriteResult& from);

  inline WriteResult& operator=(const WriteResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteResult(WriteResult&& from) noexcept
    : WriteResult() {
    *this = ::std::move(from);
  }

  inline WriteResult& operator=(WriteResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WriteResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteResult* internal_default_instance() {
    return reinterpret_cast<const WriteResult*>(
               &_WriteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(WriteResult* other);
  friend void swap(WriteResult& a, WriteResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteResult* New() const final {
    return CreateMaybeMessage<WriteResult>(nullptr);
  }

  WriteResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteResult& from);
  void MergeFrom(const WriteResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.firestore.v1.Value transform_results = 2;
  int transform_results_size() const;
  void clear_transform_results();
  static const int kTransformResultsFieldNumber = 2;
  ::google::firestore::v1::Value* mutable_transform_results(int index);
  ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Value >*
      mutable_transform_results();
  const ::google::firestore::v1::Value& transform_results(int index) const;
  ::google::firestore::v1::Value* add_transform_results();
  const ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Value >&
      transform_results() const;

  // .google.protobuf.Timestamp update_time = 1;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // @@protoc_insertion_point(class_scope:google.firestore.v1.WriteResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Value > transform_results_;
  ::google::protobuf::Timestamp* update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fwrite_2eproto;
};
// -------------------------------------------------------------------

class DocumentChange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.DocumentChange) */ {
 public:
  DocumentChange();
  virtual ~DocumentChange();

  DocumentChange(const DocumentChange& from);

  inline DocumentChange& operator=(const DocumentChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentChange(DocumentChange&& from) noexcept
    : DocumentChange() {
    *this = ::std::move(from);
  }

  inline DocumentChange& operator=(DocumentChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DocumentChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentChange* internal_default_instance() {
    return reinterpret_cast<const DocumentChange*>(
               &_DocumentChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DocumentChange* other);
  friend void swap(DocumentChange& a, DocumentChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentChange* New() const final {
    return CreateMaybeMessage<DocumentChange>(nullptr);
  }

  DocumentChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DocumentChange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DocumentChange& from);
  void MergeFrom(const DocumentChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 target_ids = 5;
  int target_ids_size() const;
  void clear_target_ids();
  static const int kTargetIdsFieldNumber = 5;
  ::google::protobuf::int32 target_ids(int index) const;
  void set_target_ids(int index, ::google::protobuf::int32 value);
  void add_target_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      target_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_target_ids();

  // repeated int32 removed_target_ids = 6;
  int removed_target_ids_size() const;
  void clear_removed_target_ids();
  static const int kRemovedTargetIdsFieldNumber = 6;
  ::google::protobuf::int32 removed_target_ids(int index) const;
  void set_removed_target_ids(int index, ::google::protobuf::int32 value);
  void add_removed_target_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      removed_target_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_removed_target_ids();

  // .google.firestore.v1.Document document = 1;
  bool has_document() const;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::google::firestore::v1::Document& document() const;
  ::google::firestore::v1::Document* release_document();
  ::google::firestore::v1::Document* mutable_document();
  void set_allocated_document(::google::firestore::v1::Document* document);

  // @@protoc_insertion_point(class_scope:google.firestore.v1.DocumentChange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > target_ids_;
  mutable std::atomic<int> _target_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > removed_target_ids_;
  mutable std::atomic<int> _removed_target_ids_cached_byte_size_;
  ::google::firestore::v1::Document* document_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fwrite_2eproto;
};
// -------------------------------------------------------------------

class DocumentDelete final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.DocumentDelete) */ {
 public:
  DocumentDelete();
  virtual ~DocumentDelete();

  DocumentDelete(const DocumentDelete& from);

  inline DocumentDelete& operator=(const DocumentDelete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentDelete(DocumentDelete&& from) noexcept
    : DocumentDelete() {
    *this = ::std::move(from);
  }

  inline DocumentDelete& operator=(DocumentDelete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DocumentDelete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentDelete* internal_default_instance() {
    return reinterpret_cast<const DocumentDelete*>(
               &_DocumentDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DocumentDelete* other);
  friend void swap(DocumentDelete& a, DocumentDelete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentDelete* New() const final {
    return CreateMaybeMessage<DocumentDelete>(nullptr);
  }

  DocumentDelete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DocumentDelete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DocumentDelete& from);
  void MergeFrom(const DocumentDelete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentDelete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 removed_target_ids = 6;
  int removed_target_ids_size() const;
  void clear_removed_target_ids();
  static const int kRemovedTargetIdsFieldNumber = 6;
  ::google::protobuf::int32 removed_target_ids(int index) const;
  void set_removed_target_ids(int index, ::google::protobuf::int32 value);
  void add_removed_target_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      removed_target_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_removed_target_ids();

  // string document = 1;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // .google.protobuf.Timestamp read_time = 4;
  bool has_read_time() const;
  void clear_read_time();
  static const int kReadTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& read_time() const;
  ::google::protobuf::Timestamp* release_read_time();
  ::google::protobuf::Timestamp* mutable_read_time();
  void set_allocated_read_time(::google::protobuf::Timestamp* read_time);

  // @@protoc_insertion_point(class_scope:google.firestore.v1.DocumentDelete)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > removed_target_ids_;
  mutable std::atomic<int> _removed_target_ids_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  ::google::protobuf::Timestamp* read_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fwrite_2eproto;
};
// -------------------------------------------------------------------

class DocumentRemove final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.DocumentRemove) */ {
 public:
  DocumentRemove();
  virtual ~DocumentRemove();

  DocumentRemove(const DocumentRemove& from);

  inline DocumentRemove& operator=(const DocumentRemove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentRemove(DocumentRemove&& from) noexcept
    : DocumentRemove() {
    *this = ::std::move(from);
  }

  inline DocumentRemove& operator=(DocumentRemove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DocumentRemove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentRemove* internal_default_instance() {
    return reinterpret_cast<const DocumentRemove*>(
               &_DocumentRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DocumentRemove* other);
  friend void swap(DocumentRemove& a, DocumentRemove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentRemove* New() const final {
    return CreateMaybeMessage<DocumentRemove>(nullptr);
  }

  DocumentRemove* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DocumentRemove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DocumentRemove& from);
  void MergeFrom(const DocumentRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentRemove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 removed_target_ids = 2;
  int removed_target_ids_size() const;
  void clear_removed_target_ids();
  static const int kRemovedTargetIdsFieldNumber = 2;
  ::google::protobuf::int32 removed_target_ids(int index) const;
  void set_removed_target_ids(int index, ::google::protobuf::int32 value);
  void add_removed_target_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      removed_target_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_removed_target_ids();

  // string document = 1;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const char* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // .google.protobuf.Timestamp read_time = 4;
  bool has_read_time() const;
  void clear_read_time();
  static const int kReadTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& read_time() const;
  ::google::protobuf::Timestamp* release_read_time();
  ::google::protobuf::Timestamp* mutable_read_time();
  void set_allocated_read_time(::google::protobuf::Timestamp* read_time);

  // @@protoc_insertion_point(class_scope:google.firestore.v1.DocumentRemove)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > removed_target_ids_;
  mutable std::atomic<int> _removed_target_ids_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  ::google::protobuf::Timestamp* read_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fwrite_2eproto;
};
// -------------------------------------------------------------------

class ExistenceFilter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.ExistenceFilter) */ {
 public:
  ExistenceFilter();
  virtual ~ExistenceFilter();

  ExistenceFilter(const ExistenceFilter& from);

  inline ExistenceFilter& operator=(const ExistenceFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExistenceFilter(ExistenceFilter&& from) noexcept
    : ExistenceFilter() {
    *this = ::std::move(from);
  }

  inline ExistenceFilter& operator=(ExistenceFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExistenceFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExistenceFilter* internal_default_instance() {
    return reinterpret_cast<const ExistenceFilter*>(
               &_ExistenceFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ExistenceFilter* other);
  friend void swap(ExistenceFilter& a, ExistenceFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExistenceFilter* New() const final {
    return CreateMaybeMessage<ExistenceFilter>(nullptr);
  }

  ExistenceFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExistenceFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExistenceFilter& from);
  void MergeFrom(const ExistenceFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExistenceFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 target_id = 1;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  ::google::protobuf::int32 target_id() const;
  void set_target_id(::google::protobuf::int32 value);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.firestore.v1.ExistenceFilter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 target_id_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fwrite_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Write

// .google.firestore.v1.Document update = 1;
inline bool Write::has_update() const {
  return operation_case() == kUpdate;
}
inline void Write::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline ::google::firestore::v1::Document* Write::release_update() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Write.update)
  if (has_update()) {
    clear_has_operation();
      ::google::firestore::v1::Document* temp = operation_.update_;
    operation_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::Document& Write::update() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Write.update)
  return has_update()
      ? *operation_.update_
      : *reinterpret_cast< ::google::firestore::v1::Document*>(&::google::firestore::v1::_Document_default_instance_);
}
inline ::google::firestore::v1::Document* Write::mutable_update() {
  if (!has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = CreateMaybeMessage< ::google::firestore::v1::Document >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Write.update)
  return operation_.update_;
}

// string delete = 2;
inline bool Write::has_delete_() const {
  return operation_case() == kDelete;
}
inline void Write::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void Write::clear_delete_() {
  if (has_delete_()) {
    operation_.delete__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_operation();
  }
}
inline const ::std::string& Write::delete_() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Write.delete)
  if (has_delete_()) {
    return operation_.delete__.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Write::set_delete_(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.firestore.v1.Write.delete)
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.delete__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.Write.delete)
}
#if LANG_CXX11
inline void Write::set_delete_(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.firestore.v1.Write.delete)
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.delete__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.Write.delete)
}
#endif
inline void Write::set_delete_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.delete__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.Write.delete)
}
inline void Write::set_delete_(const char* value, size_t size) {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  operation_.delete__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.Write.delete)
}
inline ::std::string* Write::mutable_delete_() {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Write.delete)
  return operation_.delete__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Write::release_delete_() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Write.delete)
  if (has_delete_()) {
    clear_has_operation();
    return operation_.delete__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Write::set_allocated_delete_(::std::string* delete_) {
  if (has_operation()) {
    clear_operation();
  }
  if (delete_ != nullptr) {
    set_has_delete_();
    operation_.delete__.UnsafeSetDefault(delete_);
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Write.delete)
}

// .google.firestore.v1.DocumentTransform transform = 6;
inline bool Write::has_transform() const {
  return operation_case() == kTransform;
}
inline void Write::set_has_transform() {
  _oneof_case_[0] = kTransform;
}
inline void Write::clear_transform() {
  if (has_transform()) {
    delete operation_.transform_;
    clear_has_operation();
  }
}
inline ::google::firestore::v1::DocumentTransform* Write::release_transform() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Write.transform)
  if (has_transform()) {
    clear_has_operation();
      ::google::firestore::v1::DocumentTransform* temp = operation_.transform_;
    operation_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::DocumentTransform& Write::transform() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Write.transform)
  return has_transform()
      ? *operation_.transform_
      : *reinterpret_cast< ::google::firestore::v1::DocumentTransform*>(&::google::firestore::v1::_DocumentTransform_default_instance_);
}
inline ::google::firestore::v1::DocumentTransform* Write::mutable_transform() {
  if (!has_transform()) {
    clear_operation();
    set_has_transform();
    operation_.transform_ = CreateMaybeMessage< ::google::firestore::v1::DocumentTransform >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Write.transform)
  return operation_.transform_;
}

// .google.firestore.v1.DocumentMask update_mask = 3;
inline bool Write::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline const ::google::firestore::v1::DocumentMask& Write::update_mask() const {
  const ::google::firestore::v1::DocumentMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.firestore.v1.Write.update_mask)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::firestore::v1::DocumentMask*>(
      &::google::firestore::v1::_DocumentMask_default_instance_);
}
inline ::google::firestore::v1::DocumentMask* Write::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Write.update_mask)
  
  ::google::firestore::v1::DocumentMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::google::firestore::v1::DocumentMask* Write::mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::firestore::v1::DocumentMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Write.update_mask)
  return update_mask_;
}
inline void Write::set_allocated_update_mask(::google::firestore::v1::DocumentMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Write.update_mask)
}

// .google.firestore.v1.Precondition current_document = 4;
inline bool Write::has_current_document() const {
  return this != internal_default_instance() && current_document_ != nullptr;
}
inline const ::google::firestore::v1::Precondition& Write::current_document() const {
  const ::google::firestore::v1::Precondition* p = current_document_;
  // @@protoc_insertion_point(field_get:google.firestore.v1.Write.current_document)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::firestore::v1::Precondition*>(
      &::google::firestore::v1::_Precondition_default_instance_);
}
inline ::google::firestore::v1::Precondition* Write::release_current_document() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Write.current_document)
  
  ::google::firestore::v1::Precondition* temp = current_document_;
  current_document_ = nullptr;
  return temp;
}
inline ::google::firestore::v1::Precondition* Write::mutable_current_document() {
  
  if (current_document_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::firestore::v1::Precondition>(GetArenaNoVirtual());
    current_document_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Write.current_document)
  return current_document_;
}
inline void Write::set_allocated_current_document(::google::firestore::v1::Precondition* current_document) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(current_document_);
  }
  if (current_document) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_document = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_document, submessage_arena);
    }
    
  } else {
    
  }
  current_document_ = current_document;
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Write.current_document)
}

inline bool Write::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void Write::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline Write::OperationCase Write::operation_case() const {
  return Write::OperationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DocumentTransform_FieldTransform

// string field_path = 1;
inline void DocumentTransform_FieldTransform::clear_field_path() {
  field_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentTransform_FieldTransform::field_path() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentTransform.FieldTransform.field_path)
  return field_path_.GetNoArena();
}
inline void DocumentTransform_FieldTransform::set_field_path(const ::std::string& value) {
  
  field_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentTransform.FieldTransform.field_path)
}
#if LANG_CXX11
inline void DocumentTransform_FieldTransform::set_field_path(::std::string&& value) {
  
  field_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.DocumentTransform.FieldTransform.field_path)
}
#endif
inline void DocumentTransform_FieldTransform::set_field_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.DocumentTransform.FieldTransform.field_path)
}
inline void DocumentTransform_FieldTransform::set_field_path(const char* value, size_t size) {
  
  field_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.DocumentTransform.FieldTransform.field_path)
}
inline ::std::string* DocumentTransform_FieldTransform::mutable_field_path() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentTransform.FieldTransform.field_path)
  return field_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentTransform_FieldTransform::release_field_path() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentTransform.FieldTransform.field_path)
  
  return field_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentTransform_FieldTransform::set_allocated_field_path(::std::string* field_path) {
  if (field_path != nullptr) {
    
  } else {
    
  }
  field_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_path);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.DocumentTransform.FieldTransform.field_path)
}

// .google.firestore.v1.DocumentTransform.FieldTransform.ServerValue set_to_server_value = 2;
inline bool DocumentTransform_FieldTransform::has_set_to_server_value() const {
  return transform_type_case() == kSetToServerValue;
}
inline void DocumentTransform_FieldTransform::set_has_set_to_server_value() {
  _oneof_case_[0] = kSetToServerValue;
}
inline void DocumentTransform_FieldTransform::clear_set_to_server_value() {
  if (has_set_to_server_value()) {
    transform_type_.set_to_server_value_ = 0;
    clear_has_transform_type();
  }
}
inline ::google::firestore::v1::DocumentTransform_FieldTransform_ServerValue DocumentTransform_FieldTransform::set_to_server_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentTransform.FieldTransform.set_to_server_value)
  if (has_set_to_server_value()) {
    return static_cast< ::google::firestore::v1::DocumentTransform_FieldTransform_ServerValue >(transform_type_.set_to_server_value_);
  }
  return static_cast< ::google::firestore::v1::DocumentTransform_FieldTransform_ServerValue >(0);
}
inline void DocumentTransform_FieldTransform::set_set_to_server_value(::google::firestore::v1::DocumentTransform_FieldTransform_ServerValue value) {
  if (!has_set_to_server_value()) {
    clear_transform_type();
    set_has_set_to_server_value();
  }
  transform_type_.set_to_server_value_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentTransform.FieldTransform.set_to_server_value)
}

// .google.firestore.v1.Value increment = 3;
inline bool DocumentTransform_FieldTransform::has_increment() const {
  return transform_type_case() == kIncrement;
}
inline void DocumentTransform_FieldTransform::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
inline ::google::firestore::v1::Value* DocumentTransform_FieldTransform::release_increment() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentTransform.FieldTransform.increment)
  if (has_increment()) {
    clear_has_transform_type();
      ::google::firestore::v1::Value* temp = transform_type_.increment_;
    transform_type_.increment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::Value& DocumentTransform_FieldTransform::increment() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentTransform.FieldTransform.increment)
  return has_increment()
      ? *transform_type_.increment_
      : *reinterpret_cast< ::google::firestore::v1::Value*>(&::google::firestore::v1::_Value_default_instance_);
}
inline ::google::firestore::v1::Value* DocumentTransform_FieldTransform::mutable_increment() {
  if (!has_increment()) {
    clear_transform_type();
    set_has_increment();
    transform_type_.increment_ = CreateMaybeMessage< ::google::firestore::v1::Value >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentTransform.FieldTransform.increment)
  return transform_type_.increment_;
}

// .google.firestore.v1.Value maximum = 4;
inline bool DocumentTransform_FieldTransform::has_maximum() const {
  return transform_type_case() == kMaximum;
}
inline void DocumentTransform_FieldTransform::set_has_maximum() {
  _oneof_case_[0] = kMaximum;
}
inline ::google::firestore::v1::Value* DocumentTransform_FieldTransform::release_maximum() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentTransform.FieldTransform.maximum)
  if (has_maximum()) {
    clear_has_transform_type();
      ::google::firestore::v1::Value* temp = transform_type_.maximum_;
    transform_type_.maximum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::Value& DocumentTransform_FieldTransform::maximum() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentTransform.FieldTransform.maximum)
  return has_maximum()
      ? *transform_type_.maximum_
      : *reinterpret_cast< ::google::firestore::v1::Value*>(&::google::firestore::v1::_Value_default_instance_);
}
inline ::google::firestore::v1::Value* DocumentTransform_FieldTransform::mutable_maximum() {
  if (!has_maximum()) {
    clear_transform_type();
    set_has_maximum();
    transform_type_.maximum_ = CreateMaybeMessage< ::google::firestore::v1::Value >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentTransform.FieldTransform.maximum)
  return transform_type_.maximum_;
}

// .google.firestore.v1.Value minimum = 5;
inline bool DocumentTransform_FieldTransform::has_minimum() const {
  return transform_type_case() == kMinimum;
}
inline void DocumentTransform_FieldTransform::set_has_minimum() {
  _oneof_case_[0] = kMinimum;
}
inline ::google::firestore::v1::Value* DocumentTransform_FieldTransform::release_minimum() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentTransform.FieldTransform.minimum)
  if (has_minimum()) {
    clear_has_transform_type();
      ::google::firestore::v1::Value* temp = transform_type_.minimum_;
    transform_type_.minimum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::Value& DocumentTransform_FieldTransform::minimum() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentTransform.FieldTransform.minimum)
  return has_minimum()
      ? *transform_type_.minimum_
      : *reinterpret_cast< ::google::firestore::v1::Value*>(&::google::firestore::v1::_Value_default_instance_);
}
inline ::google::firestore::v1::Value* DocumentTransform_FieldTransform::mutable_minimum() {
  if (!has_minimum()) {
    clear_transform_type();
    set_has_minimum();
    transform_type_.minimum_ = CreateMaybeMessage< ::google::firestore::v1::Value >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentTransform.FieldTransform.minimum)
  return transform_type_.minimum_;
}

// .google.firestore.v1.ArrayValue append_missing_elements = 6;
inline bool DocumentTransform_FieldTransform::has_append_missing_elements() const {
  return transform_type_case() == kAppendMissingElements;
}
inline void DocumentTransform_FieldTransform::set_has_append_missing_elements() {
  _oneof_case_[0] = kAppendMissingElements;
}
inline ::google::firestore::v1::ArrayValue* DocumentTransform_FieldTransform::release_append_missing_elements() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentTransform.FieldTransform.append_missing_elements)
  if (has_append_missing_elements()) {
    clear_has_transform_type();
      ::google::firestore::v1::ArrayValue* temp = transform_type_.append_missing_elements_;
    transform_type_.append_missing_elements_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::ArrayValue& DocumentTransform_FieldTransform::append_missing_elements() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentTransform.FieldTransform.append_missing_elements)
  return has_append_missing_elements()
      ? *transform_type_.append_missing_elements_
      : *reinterpret_cast< ::google::firestore::v1::ArrayValue*>(&::google::firestore::v1::_ArrayValue_default_instance_);
}
inline ::google::firestore::v1::ArrayValue* DocumentTransform_FieldTransform::mutable_append_missing_elements() {
  if (!has_append_missing_elements()) {
    clear_transform_type();
    set_has_append_missing_elements();
    transform_type_.append_missing_elements_ = CreateMaybeMessage< ::google::firestore::v1::ArrayValue >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentTransform.FieldTransform.append_missing_elements)
  return transform_type_.append_missing_elements_;
}

// .google.firestore.v1.ArrayValue remove_all_from_array = 7;
inline bool DocumentTransform_FieldTransform::has_remove_all_from_array() const {
  return transform_type_case() == kRemoveAllFromArray;
}
inline void DocumentTransform_FieldTransform::set_has_remove_all_from_array() {
  _oneof_case_[0] = kRemoveAllFromArray;
}
inline ::google::firestore::v1::ArrayValue* DocumentTransform_FieldTransform::release_remove_all_from_array() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentTransform.FieldTransform.remove_all_from_array)
  if (has_remove_all_from_array()) {
    clear_has_transform_type();
      ::google::firestore::v1::ArrayValue* temp = transform_type_.remove_all_from_array_;
    transform_type_.remove_all_from_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::ArrayValue& DocumentTransform_FieldTransform::remove_all_from_array() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentTransform.FieldTransform.remove_all_from_array)
  return has_remove_all_from_array()
      ? *transform_type_.remove_all_from_array_
      : *reinterpret_cast< ::google::firestore::v1::ArrayValue*>(&::google::firestore::v1::_ArrayValue_default_instance_);
}
inline ::google::firestore::v1::ArrayValue* DocumentTransform_FieldTransform::mutable_remove_all_from_array() {
  if (!has_remove_all_from_array()) {
    clear_transform_type();
    set_has_remove_all_from_array();
    transform_type_.remove_all_from_array_ = CreateMaybeMessage< ::google::firestore::v1::ArrayValue >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentTransform.FieldTransform.remove_all_from_array)
  return transform_type_.remove_all_from_array_;
}

inline bool DocumentTransform_FieldTransform::has_transform_type() const {
  return transform_type_case() != TRANSFORM_TYPE_NOT_SET;
}
inline void DocumentTransform_FieldTransform::clear_has_transform_type() {
  _oneof_case_[0] = TRANSFORM_TYPE_NOT_SET;
}
inline DocumentTransform_FieldTransform::TransformTypeCase DocumentTransform_FieldTransform::transform_type_case() const {
  return DocumentTransform_FieldTransform::TransformTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DocumentTransform

// string document = 1;
inline void DocumentTransform::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentTransform::document() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentTransform.document)
  return document_.GetNoArena();
}
inline void DocumentTransform::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentTransform.document)
}
#if LANG_CXX11
inline void DocumentTransform::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.DocumentTransform.document)
}
#endif
inline void DocumentTransform::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.DocumentTransform.document)
}
inline void DocumentTransform::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.DocumentTransform.document)
}
inline ::std::string* DocumentTransform::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentTransform.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentTransform::release_document() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentTransform.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentTransform::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.DocumentTransform.document)
}

// repeated .google.firestore.v1.DocumentTransform.FieldTransform field_transforms = 2;
inline int DocumentTransform::field_transforms_size() const {
  return field_transforms_.size();
}
inline void DocumentTransform::clear_field_transforms() {
  field_transforms_.Clear();
}
inline ::google::firestore::v1::DocumentTransform_FieldTransform* DocumentTransform::mutable_field_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentTransform.field_transforms)
  return field_transforms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::DocumentTransform_FieldTransform >*
DocumentTransform::mutable_field_transforms() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.v1.DocumentTransform.field_transforms)
  return &field_transforms_;
}
inline const ::google::firestore::v1::DocumentTransform_FieldTransform& DocumentTransform::field_transforms(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentTransform.field_transforms)
  return field_transforms_.Get(index);
}
inline ::google::firestore::v1::DocumentTransform_FieldTransform* DocumentTransform::add_field_transforms() {
  // @@protoc_insertion_point(field_add:google.firestore.v1.DocumentTransform.field_transforms)
  return field_transforms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::DocumentTransform_FieldTransform >&
DocumentTransform::field_transforms() const {
  // @@protoc_insertion_point(field_list:google.firestore.v1.DocumentTransform.field_transforms)
  return field_transforms_;
}

// -------------------------------------------------------------------

// WriteResult

// .google.protobuf.Timestamp update_time = 1;
inline bool WriteResult::has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& WriteResult::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.firestore.v1.WriteResult.update_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* WriteResult::release_update_time() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.WriteResult.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* WriteResult::mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.WriteResult.update_time)
  return update_time_;
}
inline void WriteResult::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.WriteResult.update_time)
}

// repeated .google.firestore.v1.Value transform_results = 2;
inline int WriteResult::transform_results_size() const {
  return transform_results_.size();
}
inline ::google::firestore::v1::Value* WriteResult::mutable_transform_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.WriteResult.transform_results)
  return transform_results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Value >*
WriteResult::mutable_transform_results() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.v1.WriteResult.transform_results)
  return &transform_results_;
}
inline const ::google::firestore::v1::Value& WriteResult::transform_results(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.WriteResult.transform_results)
  return transform_results_.Get(index);
}
inline ::google::firestore::v1::Value* WriteResult::add_transform_results() {
  // @@protoc_insertion_point(field_add:google.firestore.v1.WriteResult.transform_results)
  return transform_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Value >&
WriteResult::transform_results() const {
  // @@protoc_insertion_point(field_list:google.firestore.v1.WriteResult.transform_results)
  return transform_results_;
}

// -------------------------------------------------------------------

// DocumentChange

// .google.firestore.v1.Document document = 1;
inline bool DocumentChange::has_document() const {
  return this != internal_default_instance() && document_ != nullptr;
}
inline const ::google::firestore::v1::Document& DocumentChange::document() const {
  const ::google::firestore::v1::Document* p = document_;
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentChange.document)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::firestore::v1::Document*>(
      &::google::firestore::v1::_Document_default_instance_);
}
inline ::google::firestore::v1::Document* DocumentChange::release_document() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentChange.document)
  
  ::google::firestore::v1::Document* temp = document_;
  document_ = nullptr;
  return temp;
}
inline ::google::firestore::v1::Document* DocumentChange::mutable_document() {
  
  if (document_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::firestore::v1::Document>(GetArenaNoVirtual());
    document_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentChange.document)
  return document_;
}
inline void DocumentChange::set_allocated_document(::google::firestore::v1::Document* document) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(document_);
  }
  if (document) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      document = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    
  } else {
    
  }
  document_ = document;
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.DocumentChange.document)
}

// repeated int32 target_ids = 5;
inline int DocumentChange::target_ids_size() const {
  return target_ids_.size();
}
inline void DocumentChange::clear_target_ids() {
  target_ids_.Clear();
}
inline ::google::protobuf::int32 DocumentChange::target_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentChange.target_ids)
  return target_ids_.Get(index);
}
inline void DocumentChange::set_target_ids(int index, ::google::protobuf::int32 value) {
  target_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentChange.target_ids)
}
inline void DocumentChange::add_target_ids(::google::protobuf::int32 value) {
  target_ids_.Add(value);
  // @@protoc_insertion_point(field_add:google.firestore.v1.DocumentChange.target_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocumentChange::target_ids() const {
  // @@protoc_insertion_point(field_list:google.firestore.v1.DocumentChange.target_ids)
  return target_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocumentChange::mutable_target_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.v1.DocumentChange.target_ids)
  return &target_ids_;
}

// repeated int32 removed_target_ids = 6;
inline int DocumentChange::removed_target_ids_size() const {
  return removed_target_ids_.size();
}
inline void DocumentChange::clear_removed_target_ids() {
  removed_target_ids_.Clear();
}
inline ::google::protobuf::int32 DocumentChange::removed_target_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentChange.removed_target_ids)
  return removed_target_ids_.Get(index);
}
inline void DocumentChange::set_removed_target_ids(int index, ::google::protobuf::int32 value) {
  removed_target_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentChange.removed_target_ids)
}
inline void DocumentChange::add_removed_target_ids(::google::protobuf::int32 value) {
  removed_target_ids_.Add(value);
  // @@protoc_insertion_point(field_add:google.firestore.v1.DocumentChange.removed_target_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocumentChange::removed_target_ids() const {
  // @@protoc_insertion_point(field_list:google.firestore.v1.DocumentChange.removed_target_ids)
  return removed_target_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocumentChange::mutable_removed_target_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.v1.DocumentChange.removed_target_ids)
  return &removed_target_ids_;
}

// -------------------------------------------------------------------

// DocumentDelete

// string document = 1;
inline void DocumentDelete::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentDelete::document() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentDelete.document)
  return document_.GetNoArena();
}
inline void DocumentDelete::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentDelete.document)
}
#if LANG_CXX11
inline void DocumentDelete::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.DocumentDelete.document)
}
#endif
inline void DocumentDelete::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.DocumentDelete.document)
}
inline void DocumentDelete::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.DocumentDelete.document)
}
inline ::std::string* DocumentDelete::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentDelete.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentDelete::release_document() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentDelete.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentDelete::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.DocumentDelete.document)
}

// repeated int32 removed_target_ids = 6;
inline int DocumentDelete::removed_target_ids_size() const {
  return removed_target_ids_.size();
}
inline void DocumentDelete::clear_removed_target_ids() {
  removed_target_ids_.Clear();
}
inline ::google::protobuf::int32 DocumentDelete::removed_target_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentDelete.removed_target_ids)
  return removed_target_ids_.Get(index);
}
inline void DocumentDelete::set_removed_target_ids(int index, ::google::protobuf::int32 value) {
  removed_target_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentDelete.removed_target_ids)
}
inline void DocumentDelete::add_removed_target_ids(::google::protobuf::int32 value) {
  removed_target_ids_.Add(value);
  // @@protoc_insertion_point(field_add:google.firestore.v1.DocumentDelete.removed_target_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocumentDelete::removed_target_ids() const {
  // @@protoc_insertion_point(field_list:google.firestore.v1.DocumentDelete.removed_target_ids)
  return removed_target_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocumentDelete::mutable_removed_target_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.v1.DocumentDelete.removed_target_ids)
  return &removed_target_ids_;
}

// .google.protobuf.Timestamp read_time = 4;
inline bool DocumentDelete::has_read_time() const {
  return this != internal_default_instance() && read_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& DocumentDelete::read_time() const {
  const ::google::protobuf::Timestamp* p = read_time_;
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentDelete.read_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DocumentDelete::release_read_time() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentDelete.read_time)
  
  ::google::protobuf::Timestamp* temp = read_time_;
  read_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* DocumentDelete::mutable_read_time() {
  
  if (read_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    read_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentDelete.read_time)
  return read_time_;
}
inline void DocumentDelete::set_allocated_read_time(::google::protobuf::Timestamp* read_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(read_time_);
  }
  if (read_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    
  } else {
    
  }
  read_time_ = read_time;
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.DocumentDelete.read_time)
}

// -------------------------------------------------------------------

// DocumentRemove

// string document = 1;
inline void DocumentRemove::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentRemove::document() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentRemove.document)
  return document_.GetNoArena();
}
inline void DocumentRemove::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentRemove.document)
}
#if LANG_CXX11
inline void DocumentRemove::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.DocumentRemove.document)
}
#endif
inline void DocumentRemove::set_document(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.DocumentRemove.document)
}
inline void DocumentRemove::set_document(const char* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.DocumentRemove.document)
}
inline ::std::string* DocumentRemove::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentRemove.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentRemove::release_document() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentRemove.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentRemove::set_allocated_document(::std::string* document) {
  if (document != nullptr) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.DocumentRemove.document)
}

// repeated int32 removed_target_ids = 2;
inline int DocumentRemove::removed_target_ids_size() const {
  return removed_target_ids_.size();
}
inline void DocumentRemove::clear_removed_target_ids() {
  removed_target_ids_.Clear();
}
inline ::google::protobuf::int32 DocumentRemove::removed_target_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentRemove.removed_target_ids)
  return removed_target_ids_.Get(index);
}
inline void DocumentRemove::set_removed_target_ids(int index, ::google::protobuf::int32 value) {
  removed_target_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentRemove.removed_target_ids)
}
inline void DocumentRemove::add_removed_target_ids(::google::protobuf::int32 value) {
  removed_target_ids_.Add(value);
  // @@protoc_insertion_point(field_add:google.firestore.v1.DocumentRemove.removed_target_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocumentRemove::removed_target_ids() const {
  // @@protoc_insertion_point(field_list:google.firestore.v1.DocumentRemove.removed_target_ids)
  return removed_target_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocumentRemove::mutable_removed_target_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.v1.DocumentRemove.removed_target_ids)
  return &removed_target_ids_;
}

// .google.protobuf.Timestamp read_time = 4;
inline bool DocumentRemove::has_read_time() const {
  return this != internal_default_instance() && read_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& DocumentRemove::read_time() const {
  const ::google::protobuf::Timestamp* p = read_time_;
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentRemove.read_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DocumentRemove::release_read_time() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.DocumentRemove.read_time)
  
  ::google::protobuf::Timestamp* temp = read_time_;
  read_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* DocumentRemove::mutable_read_time() {
  
  if (read_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    read_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentRemove.read_time)
  return read_time_;
}
inline void DocumentRemove::set_allocated_read_time(::google::protobuf::Timestamp* read_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(read_time_);
  }
  if (read_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    
  } else {
    
  }
  read_time_ = read_time;
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.DocumentRemove.read_time)
}

// -------------------------------------------------------------------

// ExistenceFilter

// int32 target_id = 1;
inline void ExistenceFilter::clear_target_id() {
  target_id_ = 0;
}
inline ::google::protobuf::int32 ExistenceFilter::target_id() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.ExistenceFilter.target_id)
  return target_id_;
}
inline void ExistenceFilter::set_target_id(::google::protobuf::int32 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.v1.ExistenceFilter.target_id)
}

// int32 count = 2;
inline void ExistenceFilter::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 ExistenceFilter::count() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.ExistenceFilter.count)
  return count_;
}
inline void ExistenceFilter::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.v1.ExistenceFilter.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace firestore
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::firestore::v1::DocumentTransform_FieldTransform_ServerValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::firestore::v1::DocumentTransform_FieldTransform_ServerValue>() {
  return ::google::firestore::v1::DocumentTransform_FieldTransform_ServerValue_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fwrite_2eproto
