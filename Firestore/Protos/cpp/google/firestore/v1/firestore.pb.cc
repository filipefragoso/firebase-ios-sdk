/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/firestore.proto

#include "google/firestore/v1/firestore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DocumentMask_google_2ffirestore_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Precondition_google_2ffirestore_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TransactionOptions_google_2ffirestore_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fdocument_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Document_google_2ffirestore_2fv1_2fdocument_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2ffirestore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListenRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2ffirestore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Target_DocumentsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2ffirestore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WriteRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2ffirestore_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Target_QueryTarget_google_2ffirestore_2fv1_2ffirestore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2ffirestore_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TargetChange_google_2ffirestore_2fv1_2ffirestore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2ffirestore_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Target_google_2ffirestore_2fv1_2ffirestore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fquery_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_StructuredQuery_google_2ffirestore_2fv1_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fwrite_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExistenceFilter_google_2ffirestore_2fv1_2fwrite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fwrite_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DocumentChange_google_2ffirestore_2fv1_2fwrite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fwrite_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DocumentDelete_google_2ffirestore_2fv1_2fwrite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fwrite_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DocumentRemove_google_2ffirestore_2fv1_2fwrite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fwrite_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_WriteResult_google_2ffirestore_2fv1_2fwrite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fwrite_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Write_google_2ffirestore_2fv1_2fwrite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Status_google_2frpc_2fstatus_2eproto;
namespace google {
namespace firestore {
namespace v1 {
class GetDocumentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDocumentRequest> _instance;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
  const ::google::protobuf::Timestamp* read_time_;
} _GetDocumentRequest_default_instance_;
class ListDocumentsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListDocumentsRequest> _instance;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
  const ::google::protobuf::Timestamp* read_time_;
} _ListDocumentsRequest_default_instance_;
class ListDocumentsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListDocumentsResponse> _instance;
} _ListDocumentsResponse_default_instance_;
class CreateDocumentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateDocumentRequest> _instance;
} _CreateDocumentRequest_default_instance_;
class UpdateDocumentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateDocumentRequest> _instance;
} _UpdateDocumentRequest_default_instance_;
class DeleteDocumentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteDocumentRequest> _instance;
} _DeleteDocumentRequest_default_instance_;
class BatchGetDocumentsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchGetDocumentsRequest> _instance;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
  const ::google::firestore::v1::TransactionOptions* new_transaction_;
  const ::google::protobuf::Timestamp* read_time_;
} _BatchGetDocumentsRequest_default_instance_;
class BatchGetDocumentsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchGetDocumentsResponse> _instance;
  const ::google::firestore::v1::Document* found_;
  ::google::protobuf::internal::ArenaStringPtr missing_;
} _BatchGetDocumentsResponse_default_instance_;
class BeginTransactionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeginTransactionRequest> _instance;
} _BeginTransactionRequest_default_instance_;
class BeginTransactionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeginTransactionResponse> _instance;
} _BeginTransactionResponse_default_instance_;
class CommitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommitRequest> _instance;
} _CommitRequest_default_instance_;
class CommitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommitResponse> _instance;
} _CommitResponse_default_instance_;
class RollbackRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RollbackRequest> _instance;
} _RollbackRequest_default_instance_;
class RunQueryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunQueryRequest> _instance;
  const ::google::firestore::v1::StructuredQuery* structured_query_;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
  const ::google::firestore::v1::TransactionOptions* new_transaction_;
  const ::google::protobuf::Timestamp* read_time_;
} _RunQueryRequest_default_instance_;
class RunQueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunQueryResponse> _instance;
} _RunQueryResponse_default_instance_;
class WriteRequest_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteRequest_LabelsEntry_DoNotUse> _instance;
} _WriteRequest_LabelsEntry_DoNotUse_default_instance_;
class WriteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteRequest> _instance;
} _WriteRequest_default_instance_;
class WriteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteResponse> _instance;
} _WriteResponse_default_instance_;
class ListenRequest_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenRequest_LabelsEntry_DoNotUse> _instance;
} _ListenRequest_LabelsEntry_DoNotUse_default_instance_;
class ListenRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenRequest> _instance;
  const ::google::firestore::v1::Target* add_target_;
  ::google::protobuf::int32 remove_target_;
} _ListenRequest_default_instance_;
class ListenResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenResponse> _instance;
  const ::google::firestore::v1::TargetChange* target_change_;
  const ::google::firestore::v1::DocumentChange* document_change_;
  const ::google::firestore::v1::DocumentDelete* document_delete_;
  const ::google::firestore::v1::DocumentRemove* document_remove_;
  const ::google::firestore::v1::ExistenceFilter* filter_;
} _ListenResponse_default_instance_;
class Target_DocumentsTargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Target_DocumentsTarget> _instance;
} _Target_DocumentsTarget_default_instance_;
class Target_QueryTargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Target_QueryTarget> _instance;
  const ::google::firestore::v1::StructuredQuery* structured_query_;
} _Target_QueryTarget_default_instance_;
class TargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Target> _instance;
  const ::google::firestore::v1::Target_QueryTarget* query_;
  const ::google::firestore::v1::Target_DocumentsTarget* documents_;
  ::google::protobuf::internal::ArenaStringPtr resume_token_;
  const ::google::protobuf::Timestamp* read_time_;
} _Target_default_instance_;
class TargetChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetChange> _instance;
} _TargetChange_default_instance_;
class ListCollectionIdsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListCollectionIdsRequest> _instance;
} _ListCollectionIdsRequest_default_instance_;
class ListCollectionIdsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListCollectionIdsResponse> _instance;
} _ListCollectionIdsResponse_default_instance_;
}  // namespace v1
}  // namespace firestore
}  // namespace google
static void InitDefaultsGetDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_GetDocumentRequest_default_instance_;
    new (ptr) ::google::firestore::v1::GetDocumentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::GetDocumentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_DocumentMask_google_2ffirestore_2fv1_2fcommon_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsListDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_ListDocumentsRequest_default_instance_;
    new (ptr) ::google::firestore::v1::ListDocumentsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::ListDocumentsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ListDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsListDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_DocumentMask_google_2ffirestore_2fv1_2fcommon_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsListDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_ListDocumentsResponse_default_instance_;
    new (ptr) ::google::firestore::v1::ListDocumentsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::ListDocumentsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Document_google_2ffirestore_2fv1_2fdocument_2eproto.base,}};

static void InitDefaultsCreateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_CreateDocumentRequest_default_instance_;
    new (ptr) ::google::firestore::v1::CreateDocumentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::CreateDocumentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Document_google_2ffirestore_2fv1_2fdocument_2eproto.base,
      &scc_info_DocumentMask_google_2ffirestore_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsUpdateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_UpdateDocumentRequest_default_instance_;
    new (ptr) ::google::firestore::v1::UpdateDocumentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::UpdateDocumentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UpdateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUpdateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Document_google_2ffirestore_2fv1_2fdocument_2eproto.base,
      &scc_info_DocumentMask_google_2ffirestore_2fv1_2fcommon_2eproto.base,
      &scc_info_Precondition_google_2ffirestore_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsDeleteDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_DeleteDocumentRequest_default_instance_;
    new (ptr) ::google::firestore::v1::DeleteDocumentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::DeleteDocumentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeleteDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeleteDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Precondition_google_2ffirestore_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsBatchGetDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_BatchGetDocumentsRequest_default_instance_;
    new (ptr) ::google::firestore::v1::BatchGetDocumentsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::BatchGetDocumentsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_BatchGetDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsBatchGetDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_DocumentMask_google_2ffirestore_2fv1_2fcommon_2eproto.base,
      &scc_info_TransactionOptions_google_2ffirestore_2fv1_2fcommon_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsBatchGetDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_BatchGetDocumentsResponse_default_instance_;
    new (ptr) ::google::firestore::v1::BatchGetDocumentsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::BatchGetDocumentsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BatchGetDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBatchGetDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Document_google_2ffirestore_2fv1_2fdocument_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsBeginTransactionRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_BeginTransactionRequest_default_instance_;
    new (ptr) ::google::firestore::v1::BeginTransactionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::BeginTransactionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BeginTransactionRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBeginTransactionRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_TransactionOptions_google_2ffirestore_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsBeginTransactionResponse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_BeginTransactionResponse_default_instance_;
    new (ptr) ::google::firestore::v1::BeginTransactionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::BeginTransactionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeginTransactionResponse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeginTransactionResponse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {}};

static void InitDefaultsCommitRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_CommitRequest_default_instance_;
    new (ptr) ::google::firestore::v1::CommitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::CommitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommitRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommitRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Write_google_2ffirestore_2fv1_2fwrite_2eproto.base,}};

static void InitDefaultsCommitResponse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_CommitResponse_default_instance_;
    new (ptr) ::google::firestore::v1::CommitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::CommitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CommitResponse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCommitResponse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_WriteResult_google_2ffirestore_2fv1_2fwrite_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsRollbackRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_RollbackRequest_default_instance_;
    new (ptr) ::google::firestore::v1::RollbackRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::RollbackRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RollbackRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRollbackRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {}};

static void InitDefaultsRunQueryRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_RunQueryRequest_default_instance_;
    new (ptr) ::google::firestore::v1::RunQueryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::RunQueryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RunQueryRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRunQueryRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_StructuredQuery_google_2ffirestore_2fv1_2fquery_2eproto.base,
      &scc_info_TransactionOptions_google_2ffirestore_2fv1_2fcommon_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsRunQueryResponse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_RunQueryResponse_default_instance_;
    new (ptr) ::google::firestore::v1::RunQueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::RunQueryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RunQueryResponse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRunQueryResponse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Document_google_2ffirestore_2fv1_2fdocument_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsWriteRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_WriteRequest_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse();
  }
  ::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {}};

static void InitDefaultsWriteRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_WriteRequest_default_instance_;
    new (ptr) ::google::firestore::v1::WriteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::WriteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WriteRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWriteRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Write_google_2ffirestore_2fv1_2fwrite_2eproto.base,
      &scc_info_WriteRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto.base,}};

static void InitDefaultsWriteResponse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_WriteResponse_default_instance_;
    new (ptr) ::google::firestore::v1::WriteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::WriteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WriteResponse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWriteResponse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_WriteResult_google_2ffirestore_2fv1_2fwrite_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsListenRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_ListenRequest_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse();
  }
  ::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListenRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListenRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {}};

static void InitDefaultsListenRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_ListenRequest_default_instance_;
    new (ptr) ::google::firestore::v1::ListenRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::ListenRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ListenRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsListenRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Target_google_2ffirestore_2fv1_2ffirestore_2eproto.base,
      &scc_info_ListenRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto.base,}};

static void InitDefaultsListenResponse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_ListenResponse_default_instance_;
    new (ptr) ::google::firestore::v1::ListenResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::ListenResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ListenResponse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsListenResponse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_TargetChange_google_2ffirestore_2fv1_2ffirestore_2eproto.base,
      &scc_info_DocumentChange_google_2ffirestore_2fv1_2fwrite_2eproto.base,
      &scc_info_DocumentDelete_google_2ffirestore_2fv1_2fwrite_2eproto.base,
      &scc_info_DocumentRemove_google_2ffirestore_2fv1_2fwrite_2eproto.base,
      &scc_info_ExistenceFilter_google_2ffirestore_2fv1_2fwrite_2eproto.base,}};

static void InitDefaultsTarget_DocumentsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_Target_DocumentsTarget_default_instance_;
    new (ptr) ::google::firestore::v1::Target_DocumentsTarget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::Target_DocumentsTarget::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Target_DocumentsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTarget_DocumentsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto}, {}};

static void InitDefaultsTarget_QueryTarget_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_Target_QueryTarget_default_instance_;
    new (ptr) ::google::firestore::v1::Target_QueryTarget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::Target_QueryTarget::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Target_QueryTarget_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTarget_QueryTarget_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_StructuredQuery_google_2ffirestore_2fv1_2fquery_2eproto.base,}};

static void InitDefaultsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_Target_default_instance_;
    new (ptr) ::google::firestore::v1::Target();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::Target::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Target_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Target_QueryTarget_google_2ffirestore_2fv1_2ffirestore_2eproto.base,
      &scc_info_Target_DocumentsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsTargetChange_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_TargetChange_default_instance_;
    new (ptr) ::google::firestore::v1::TargetChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::TargetChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TargetChange_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTargetChange_google_2ffirestore_2fv1_2ffirestore_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsListCollectionIdsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_ListCollectionIdsRequest_default_instance_;
    new (ptr) ::google::firestore::v1::ListCollectionIdsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::ListCollectionIdsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListCollectionIdsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListCollectionIdsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto}, {}};

static void InitDefaultsListCollectionIdsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::v1::_ListCollectionIdsResponse_default_instance_;
    new (ptr) ::google::firestore::v1::ListCollectionIdsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::v1::ListCollectionIdsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListCollectionIdsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListCollectionIdsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto}, {}};

void InitDefaults_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchGetDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchGetDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeginTransactionRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeginTransactionResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommitRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommitResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RollbackRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunQueryRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunQueryResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListenRequest_LabelsEntry_DoNotUse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListenRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListenResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Target_DocumentsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Target_QueryTarget_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Target_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TargetChange_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListCollectionIdsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListCollectionIdsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[27];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2ffirestore_2fv1_2ffirestore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, mask_),
  offsetof(::google::firestore::v1::GetDocumentRequestDefaultTypeInternal, transaction_),
  offsetof(::google::firestore::v1::GetDocumentRequestDefaultTypeInternal, read_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, consistency_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, collection_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, order_by_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, mask_),
  offsetof(::google::firestore::v1::ListDocumentsRequestDefaultTypeInternal, transaction_),
  offsetof(::google::firestore::v1::ListDocumentsRequestDefaultTypeInternal, read_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, show_missing_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, consistency_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsResponse, documents_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, collection_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, document_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, document_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, document_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, update_mask_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, mask_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, current_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::DeleteDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::DeleteDocumentRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::DeleteDocumentRequest, current_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, documents_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, mask_),
  offsetof(::google::firestore::v1::BatchGetDocumentsRequestDefaultTypeInternal, transaction_),
  offsetof(::google::firestore::v1::BatchGetDocumentsRequestDefaultTypeInternal, new_transaction_),
  offsetof(::google::firestore::v1::BatchGetDocumentsRequestDefaultTypeInternal, read_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, consistency_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::firestore::v1::BatchGetDocumentsResponseDefaultTypeInternal, found_),
  offsetof(::google::firestore::v1::BatchGetDocumentsResponseDefaultTypeInternal, missing_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, transaction_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, read_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitRequest, writes_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitResponse, write_results_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitResponse, commit_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RollbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RollbackRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RollbackRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, parent_),
  offsetof(::google::firestore::v1::RunQueryRequestDefaultTypeInternal, structured_query_),
  offsetof(::google::firestore::v1::RunQueryRequestDefaultTypeInternal, transaction_),
  offsetof(::google::firestore::v1::RunQueryRequestDefaultTypeInternal, new_transaction_),
  offsetof(::google::firestore::v1::RunQueryRequestDefaultTypeInternal, read_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, query_type_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, consistency_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, transaction_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, document_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, read_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, skipped_results_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, writes_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, stream_token_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, stream_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, stream_token_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, write_results_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, commit_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, database_),
  offsetof(::google::firestore::v1::ListenRequestDefaultTypeInternal, add_target_),
  offsetof(::google::firestore::v1::ListenRequestDefaultTypeInternal, remove_target_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, target_change_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::firestore::v1::ListenResponseDefaultTypeInternal, target_change_),
  offsetof(::google::firestore::v1::ListenResponseDefaultTypeInternal, document_change_),
  offsetof(::google::firestore::v1::ListenResponseDefaultTypeInternal, document_delete_),
  offsetof(::google::firestore::v1::ListenResponseDefaultTypeInternal, document_remove_),
  offsetof(::google::firestore::v1::ListenResponseDefaultTypeInternal, filter_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenResponse, response_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_DocumentsTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_DocumentsTarget, documents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_QueryTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_QueryTarget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_QueryTarget, parent_),
  offsetof(::google::firestore::v1::Target_QueryTargetDefaultTypeInternal, structured_query_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_QueryTarget, query_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::firestore::v1::TargetDefaultTypeInternal, query_),
  offsetof(::google::firestore::v1::TargetDefaultTypeInternal, documents_),
  offsetof(::google::firestore::v1::TargetDefaultTypeInternal, resume_token_),
  offsetof(::google::firestore::v1::TargetDefaultTypeInternal, read_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, target_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, once_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, target_type_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, resume_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, target_change_type_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, target_ids_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, cause_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, resume_token_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, read_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsResponse, collection_ids_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsResponse, next_page_token_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::firestore::v1::GetDocumentRequest)},
  { 10, -1, sizeof(::google::firestore::v1::ListDocumentsRequest)},
  { 25, -1, sizeof(::google::firestore::v1::ListDocumentsResponse)},
  { 32, -1, sizeof(::google::firestore::v1::CreateDocumentRequest)},
  { 42, -1, sizeof(::google::firestore::v1::UpdateDocumentRequest)},
  { 51, -1, sizeof(::google::firestore::v1::DeleteDocumentRequest)},
  { 58, -1, sizeof(::google::firestore::v1::BatchGetDocumentsRequest)},
  { 70, -1, sizeof(::google::firestore::v1::BatchGetDocumentsResponse)},
  { 80, -1, sizeof(::google::firestore::v1::BeginTransactionRequest)},
  { 87, -1, sizeof(::google::firestore::v1::BeginTransactionResponse)},
  { 93, -1, sizeof(::google::firestore::v1::CommitRequest)},
  { 101, -1, sizeof(::google::firestore::v1::CommitResponse)},
  { 108, -1, sizeof(::google::firestore::v1::RollbackRequest)},
  { 115, -1, sizeof(::google::firestore::v1::RunQueryRequest)},
  { 127, -1, sizeof(::google::firestore::v1::RunQueryResponse)},
  { 136, 143, sizeof(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse)},
  { 145, -1, sizeof(::google::firestore::v1::WriteRequest)},
  { 155, -1, sizeof(::google::firestore::v1::WriteResponse)},
  { 164, 171, sizeof(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse)},
  { 173, -1, sizeof(::google::firestore::v1::ListenRequest)},
  { 183, -1, sizeof(::google::firestore::v1::ListenResponse)},
  { 194, -1, sizeof(::google::firestore::v1::Target_DocumentsTarget)},
  { 200, -1, sizeof(::google::firestore::v1::Target_QueryTarget)},
  { 208, -1, sizeof(::google::firestore::v1::Target)},
  { 221, -1, sizeof(::google::firestore::v1::TargetChange)},
  { 231, -1, sizeof(::google::firestore::v1::ListCollectionIdsRequest)},
  { 239, -1, sizeof(::google::firestore::v1::ListCollectionIdsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_GetDocumentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_ListDocumentsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_ListDocumentsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_CreateDocumentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_UpdateDocumentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_DeleteDocumentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_BatchGetDocumentsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_BatchGetDocumentsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_BeginTransactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_BeginTransactionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_CommitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_CommitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_RollbackRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_RunQueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_RunQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_WriteRequest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_WriteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_WriteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_ListenRequest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_ListenRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_ListenResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_Target_DocumentsTarget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_Target_QueryTarget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_Target_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_TargetChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_ListCollectionIdsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::firestore::v1::_ListCollectionIdsResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto = {
  {}, AddDescriptors_google_2ffirestore_2fv1_2ffirestore_2eproto, "google/firestore/v1/firestore.proto", schemas,
  file_default_instances, TableStruct_google_2ffirestore_2fv1_2ffirestore_2eproto::offsets,
  file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto, 27, file_level_enum_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto, file_level_service_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto,
};

const char descriptor_table_protodef_google_2ffirestore_2fv1_2ffirestore_2eproto[] =
  "\n#google/firestore/v1/firestore.proto\022\023g"
  "oogle.firestore.v1\032\034google/api/annotatio"
  "ns.proto\032 google/firestore/v1/common.pro"
  "to\032\"google/firestore/v1/document.proto\032\037"
  "google/firestore/v1/query.proto\032\037google/"
  "firestore/v1/write.proto\032\033google/protobu"
  "f/empty.proto\032\037google/protobuf/timestamp"
  ".proto\032\027google/rpc/status.proto\"\263\001\n\022GetD"
  "ocumentRequest\022\014\n\004name\030\001 \001(\t\022/\n\004mask\030\002 \001"
  "(\0132!.google.firestore.v1.DocumentMask\022\025\n"
  "\013transaction\030\003 \001(\014H\000\022/\n\tread_time\030\005 \001(\0132"
  "\032.google.protobuf.TimestampH\000B\026\n\024consist"
  "ency_selector\"\235\002\n\024ListDocumentsRequest\022\016"
  "\n\006parent\030\001 \001(\t\022\025\n\rcollection_id\030\002 \001(\t\022\021\n"
  "\tpage_size\030\003 \001(\005\022\022\n\npage_token\030\004 \001(\t\022\020\n\010"
  "order_by\030\006 \001(\t\022/\n\004mask\030\007 \001(\0132!.google.fi"
  "restore.v1.DocumentMask\022\025\n\013transaction\030\010"
  " \001(\014H\000\022/\n\tread_time\030\n \001(\0132\032.google.proto"
  "buf.TimestampH\000\022\024\n\014show_missing\030\014 \001(\010B\026\n"
  "\024consistency_selector\"b\n\025ListDocumentsRe"
  "sponse\0220\n\tdocuments\030\001 \003(\0132\035.google.fires"
  "tore.v1.Document\022\027\n\017next_page_token\030\002 \001("
  "\t\"\265\001\n\025CreateDocumentRequest\022\016\n\006parent\030\001 "
  "\001(\t\022\025\n\rcollection_id\030\002 \001(\t\022\023\n\013document_i"
  "d\030\003 \001(\t\022/\n\010document\030\004 \001(\0132\035.google.fires"
  "tore.v1.Document\022/\n\004mask\030\005 \001(\0132!.google."
  "firestore.v1.DocumentMask\"\356\001\n\025UpdateDocu"
  "mentRequest\022/\n\010document\030\001 \001(\0132\035.google.f"
  "irestore.v1.Document\0226\n\013update_mask\030\002 \001("
  "\0132!.google.firestore.v1.DocumentMask\022/\n\004"
  "mask\030\003 \001(\0132!.google.firestore.v1.Documen"
  "tMask\022;\n\020current_document\030\004 \001(\0132!.google"
  ".firestore.v1.Precondition\"b\n\025DeleteDocu"
  "mentRequest\022\014\n\004name\030\001 \001(\t\022;\n\020current_doc"
  "ument\030\002 \001(\0132!.google.firestore.v1.Precon"
  "dition\"\224\002\n\030BatchGetDocumentsRequest\022\020\n\010d"
  "atabase\030\001 \001(\t\022\021\n\tdocuments\030\002 \003(\t\022/\n\004mask"
  "\030\003 \001(\0132!.google.firestore.v1.DocumentMas"
  "k\022\025\n\013transaction\030\004 \001(\014H\000\022B\n\017new_transact"
  "ion\030\005 \001(\0132\'.google.firestore.v1.Transact"
  "ionOptionsH\000\022/\n\tread_time\030\007 \001(\0132\032.google"
  ".protobuf.TimestampH\000B\026\n\024consistency_sel"
  "ector\"\254\001\n\031BatchGetDocumentsResponse\022.\n\005f"
  "ound\030\001 \001(\0132\035.google.firestore.v1.Documen"
  "tH\000\022\021\n\007missing\030\002 \001(\tH\000\022\023\n\013transaction\030\003 "
  "\001(\014\022-\n\tread_time\030\004 \001(\0132\032.google.protobuf"
  ".TimestampB\010\n\006result\"e\n\027BeginTransaction"
  "Request\022\020\n\010database\030\001 \001(\t\0228\n\007options\030\002 \001"
  "(\0132\'.google.firestore.v1.TransactionOpti"
  "ons\"/\n\030BeginTransactionResponse\022\023\n\013trans"
  "action\030\001 \001(\014\"b\n\rCommitRequest\022\020\n\010databas"
  "e\030\001 \001(\t\022*\n\006writes\030\002 \003(\0132\032.google.firesto"
  "re.v1.Write\022\023\n\013transaction\030\003 \001(\014\"z\n\016Comm"
  "itResponse\0227\n\rwrite_results\030\001 \003(\0132 .goog"
  "le.firestore.v1.WriteResult\022/\n\013commit_ti"
  "me\030\002 \001(\0132\032.google.protobuf.Timestamp\"8\n\017"
  "RollbackRequest\022\020\n\010database\030\001 \001(\t\022\023\n\013tra"
  "nsaction\030\002 \001(\014\"\225\002\n\017RunQueryRequest\022\016\n\006pa"
  "rent\030\001 \001(\t\022@\n\020structured_query\030\002 \001(\0132$.g"
  "oogle.firestore.v1.StructuredQueryH\000\022\025\n\013"
  "transaction\030\005 \001(\014H\001\022B\n\017new_transaction\030\006"
  " \001(\0132\'.google.firestore.v1.TransactionOp"
  "tionsH\001\022/\n\tread_time\030\007 \001(\0132\032.google.prot"
  "obuf.TimestampH\001B\014\n\nquery_typeB\026\n\024consis"
  "tency_selector\"\240\001\n\020RunQueryResponse\022\023\n\013t"
  "ransaction\030\002 \001(\014\022/\n\010document\030\001 \001(\0132\035.goo"
  "gle.firestore.v1.Document\022-\n\tread_time\030\003"
  " \001(\0132\032.google.protobuf.Timestamp\022\027\n\017skip"
  "ped_results\030\004 \001(\005\"\343\001\n\014WriteRequest\022\020\n\010da"
  "tabase\030\001 \001(\t\022\021\n\tstream_id\030\002 \001(\t\022*\n\006write"
  "s\030\003 \003(\0132\032.google.firestore.v1.Write\022\024\n\014s"
  "tream_token\030\004 \001(\014\022=\n\006labels\030\005 \003(\0132-.goog"
  "le.firestore.v1.WriteRequest.LabelsEntry"
  "\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\"\242\001\n\rWriteResponse\022\021\n\tstream_id\030\001"
  " \001(\t\022\024\n\014stream_token\030\002 \001(\014\0227\n\rwrite_resu"
  "lts\030\003 \003(\0132 .google.firestore.v1.WriteRes"
  "ult\022/\n\013commit_time\030\004 \001(\0132\032.google.protob"
  "uf.Timestamp\"\355\001\n\rListenRequest\022\020\n\010databa"
  "se\030\001 \001(\t\0221\n\nadd_target\030\002 \001(\0132\033.google.fi"
  "restore.v1.TargetH\000\022\027\n\rremove_target\030\003 \001"
  "(\005H\000\022>\n\006labels\030\004 \003(\0132..google.firestore."
  "v1.ListenRequest.LabelsEntry\032-\n\013LabelsEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\017\n\rt"
  "arget_change\"\325\002\n\016ListenResponse\022:\n\rtarge"
  "t_change\030\002 \001(\0132!.google.firestore.v1.Tar"
  "getChangeH\000\022>\n\017document_change\030\003 \001(\0132#.g"
  "oogle.firestore.v1.DocumentChangeH\000\022>\n\017d"
  "ocument_delete\030\004 \001(\0132#.google.firestore."
  "v1.DocumentDeleteH\000\022>\n\017document_remove\030\006"
  " \001(\0132#.google.firestore.v1.DocumentRemov"
  "eH\000\0226\n\006filter\030\005 \001(\0132$.google.firestore.v"
  "1.ExistenceFilterH\000B\017\n\rresponse_type\"\241\003\n"
  "\006Target\0228\n\005query\030\002 \001(\0132\'.google.firestor"
  "e.v1.Target.QueryTargetH\000\022@\n\tdocuments\030\003"
  " \001(\0132+.google.firestore.v1.Target.Docume"
  "ntsTargetH\000\022\026\n\014resume_token\030\004 \001(\014H\001\022/\n\tr"
  "ead_time\030\013 \001(\0132\032.google.protobuf.Timesta"
  "mpH\001\022\021\n\ttarget_id\030\005 \001(\005\022\014\n\004once\030\006 \001(\010\032$\n"
  "\017DocumentsTarget\022\021\n\tdocuments\030\002 \003(\t\032m\n\013Q"
  "ueryTarget\022\016\n\006parent\030\001 \001(\t\022@\n\020structured"
  "_query\030\002 \001(\0132$.google.firestore.v1.Struc"
  "turedQueryH\000B\014\n\nquery_typeB\r\n\013target_typ"
  "eB\r\n\013resume_type\"\252\002\n\014TargetChange\022N\n\022tar"
  "get_change_type\030\001 \001(\01622.google.firestore"
  ".v1.TargetChange.TargetChangeType\022\022\n\ntar"
  "get_ids\030\002 \003(\005\022!\n\005cause\030\003 \001(\0132\022.google.rp"
  "c.Status\022\024\n\014resume_token\030\004 \001(\014\022-\n\tread_t"
  "ime\030\006 \001(\0132\032.google.protobuf.Timestamp\"N\n"
  "\020TargetChangeType\022\r\n\tNO_CHANGE\020\000\022\007\n\003ADD\020"
  "\001\022\n\n\006REMOVE\020\002\022\013\n\007CURRENT\020\003\022\t\n\005RESET\020\004\"Q\n"
  "\030ListCollectionIdsRequest\022\016\n\006parent\030\001 \001("
  "\t\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t"
  "\"L\n\031ListCollectionIdsResponse\022\026\n\016collect"
  "ion_ids\030\001 \003(\t\022\027\n\017next_page_token\030\002 \001(\t2\204"
  "\022\n\tFirestore\022\217\001\n\013GetDocument\022\'.google.fi"
  "restore.v1.GetDocumentRequest\032\035.google.f"
  "irestore.v1.Document\"8\202\323\344\223\0022\0220/v1/{name="
  "projects/*/databases/*/documents/*/**}\022\262"
  "\001\n\rListDocuments\022).google.firestore.v1.L"
  "istDocumentsRequest\032*.google.firestore.v"
  "1.ListDocumentsResponse\"J\202\323\344\223\002D\022B/v1/{pa"
  "rent=projects/*/databases/*/documents/*/"
  "**}/{collection_id}\022\257\001\n\016CreateDocument\022*"
  ".google.firestore.v1.CreateDocumentReque"
  "st\032\035.google.firestore.v1.Document\"R\202\323\344\223\002"
  "L\"@/v1/{parent=projects/*/databases/*/do"
  "cuments/**}/{collection_id}:\010document\022\250\001"
  "\n\016UpdateDocument\022*.google.firestore.v1.U"
  "pdateDocumentRequest\032\035.google.firestore."
  "v1.Document\"K\202\323\344\223\002E29/v1/{document.name="
  "projects/*/databases/*/documents/*/**}:\010"
  "document\022\216\001\n\016DeleteDocument\022*.google.fir"
  "estore.v1.DeleteDocumentRequest\032\026.google"
  ".protobuf.Empty\"8\202\323\344\223\0022*0/v1/{name=proje"
  "cts/*/databases/*/documents/*/**}\022\271\001\n\021Ba"
  "tchGetDocuments\022-.google.firestore.v1.Ba"
  "tchGetDocumentsRequest\032..google.firestor"
  "e.v1.BatchGetDocumentsResponse\"C\202\323\344\223\002=\"8"
  "/v1/{database=projects/*/databases/*}/do"
  "cuments:batchGet:\001*0\001\022\274\001\n\020BeginTransacti"
  "on\022,.google.firestore.v1.BeginTransactio"
  "nRequest\032-.google.firestore.v1.BeginTran"
  "sactionResponse\"K\202\323\344\223\002E\"@/v1/{database=p"
  "rojects/*/databases/*}/documents:beginTr"
  "ansaction:\001*\022\224\001\n\006Commit\022\".google.firesto"
  "re.v1.CommitRequest\032#.google.firestore.v"
  "1.CommitResponse\"A\202\323\344\223\002;\"6/v1/{database="
  "projects/*/databases/*}/documents:commit"
  ":\001*\022\215\001\n\010Rollback\022$.google.firestore.v1.R"
  "ollbackRequest\032\026.google.protobuf.Empty\"C"
  "\202\323\344\223\002=\"8/v1/{database=projects/*/databas"
  "es/*}/documents:rollback:\001*\022\337\001\n\010RunQuery"
  "\022$.google.firestore.v1.RunQueryRequest\032%"
  ".google.firestore.v1.RunQueryResponse\"\203\001"
  "\202\323\344\223\002}\"6/v1/{parent=projects/*/databases"
  "/*/documents}:runQuery:\001*Z@\";/v1/{parent"
  "=projects/*/databases/*/documents/*/**}:"
  "runQuery:\001*0\001\022\224\001\n\005Write\022!.google.firesto"
  "re.v1.WriteRequest\032\".google.firestore.v1"
  ".WriteResponse\"@\202\323\344\223\002:\"5/v1/{database=pr"
  "ojects/*/databases/*}/documents:write:\001*"
  "(\0010\001\022\230\001\n\006Listen\022\".google.firestore.v1.Li"
  "stenRequest\032#.google.firestore.v1.Listen"
  "Response\"A\202\323\344\223\002;\"6/v1/{database=projects"
  "/*/databases/*}/documents:listen:\001*(\0010\001\022"
  "\213\002\n\021ListCollectionIds\022-.google.firestore"
  ".v1.ListCollectionIdsRequest\032..google.fi"
  "restore.v1.ListCollectionIdsResponse\"\226\001\202"
  "\323\344\223\002\217\001\"\?/v1/{parent=projects/*/databases"
  "/*/documents}:listCollectionIds:\001*ZI\"D/v"
  "1/{parent=projects/*/databases/*/documen"
  "ts/*/**}:listCollectionIds:\001*B\262\001\n\027com.go"
  "ogle.firestore.v1B\016FirestoreProtoP\001Z<goo"
  "gle.golang.org/genproto/googleapis/fires"
  "tore/v1;firestore\242\002\004GCFS\252\002\036Google.Cloud."
  "Firestore.V1Beta1\312\002\036Google\\Cloud\\Firesto"
  "re\\V1beta1b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto = {
  false, InitDefaults_google_2ffirestore_2fv1_2ffirestore_2eproto, 
  descriptor_table_protodef_google_2ffirestore_2fv1_2ffirestore_2eproto,
  "google/firestore/v1/firestore.proto", &assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto, 7098,
};

void AddDescriptors_google_2ffirestore_2fv1_2ffirestore_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[8] =
  {
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
    ::AddDescriptors_google_2ffirestore_2fv1_2fcommon_2eproto,
    ::AddDescriptors_google_2ffirestore_2fv1_2fdocument_2eproto,
    ::AddDescriptors_google_2ffirestore_2fv1_2fquery_2eproto,
    ::AddDescriptors_google_2ffirestore_2fv1_2fwrite_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fempty_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2frpc_2fstatus_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto, deps, 8);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2ffirestore_2fv1_2ffirestore_2eproto = []() { AddDescriptors_google_2ffirestore_2fv1_2ffirestore_2eproto(); return true; }();
namespace google {
namespace firestore {
namespace v1 {
const ::google::protobuf::EnumDescriptor* TargetChange_TargetChangeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return file_level_enum_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto[0];
}
bool TargetChange_TargetChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TargetChange_TargetChangeType TargetChange::NO_CHANGE;
const TargetChange_TargetChangeType TargetChange::ADD;
const TargetChange_TargetChangeType TargetChange::REMOVE;
const TargetChange_TargetChangeType TargetChange::CURRENT;
const TargetChange_TargetChangeType TargetChange::RESET;
const TargetChange_TargetChangeType TargetChange::TargetChangeType_MIN;
const TargetChange_TargetChangeType TargetChange::TargetChangeType_MAX;
const int TargetChange::TargetChangeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void GetDocumentRequest::InitAsDefaultInstance() {
  ::google::firestore::v1::_GetDocumentRequest_default_instance_._instance.get_mutable()->mask_ = const_cast< ::google::firestore::v1::DocumentMask*>(
      ::google::firestore::v1::DocumentMask::internal_default_instance());
  ::google::firestore::v1::_GetDocumentRequest_default_instance_.transaction_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::firestore::v1::_GetDocumentRequest_default_instance_.read_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class GetDocumentRequest::HasBitSetters {
 public:
  static const ::google::firestore::v1::DocumentMask& mask(const GetDocumentRequest* msg);
  static const ::google::protobuf::Timestamp& read_time(const GetDocumentRequest* msg);
};

const ::google::firestore::v1::DocumentMask&
GetDocumentRequest::HasBitSetters::mask(const GetDocumentRequest* msg) {
  return *msg->mask_;
}
const ::google::protobuf::Timestamp&
GetDocumentRequest::HasBitSetters::read_time(const GetDocumentRequest* msg) {
  return *msg->consistency_selector_.read_time_;
}
void GetDocumentRequest::clear_mask() {
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
void GetDocumentRequest::set_allocated_read_time(::google::protobuf::Timestamp* read_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_consistency_selector();
  if (read_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    consistency_selector_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.GetDocumentRequest.read_time)
}
void GetDocumentRequest::clear_read_time() {
  if (has_read_time()) {
    delete consistency_selector_.read_time_;
    clear_has_consistency_selector();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDocumentRequest::kNameFieldNumber;
const int GetDocumentRequest::kMaskFieldNumber;
const int GetDocumentRequest::kTransactionFieldNumber;
const int GetDocumentRequest::kReadTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDocumentRequest::GetDocumentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.GetDocumentRequest)
}
GetDocumentRequest::GetDocumentRequest(const GetDocumentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  clear_has_consistency_selector();
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.GetDocumentRequest)
}

void GetDocumentRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_ = nullptr;
  clear_has_consistency_selector();
}

GetDocumentRequest::~GetDocumentRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.GetDocumentRequest)
  SharedDtor();
}

void GetDocumentRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mask_;
  if (has_consistency_selector()) {
    clear_consistency_selector();
  }
}

void GetDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDocumentRequest& GetDocumentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void GetDocumentRequest::clear_consistency_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.GetDocumentRequest)
  switch (consistency_selector_case()) {
    case kTransaction: {
      consistency_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kReadTime: {
      delete consistency_selector_.read_time_;
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSISTENCY_SELECTOR_NOT_SET;
}


void GetDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.GetDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  clear_consistency_selector();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDocumentRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetDocumentRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.GetDocumentRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.DocumentMask mask = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::DocumentMask::_InternalParse;
        object = msg->mutable_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes transaction = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transaction();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp read_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_read_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDocumentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.GetDocumentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.GetDocumentRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.DocumentMask mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp read_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.GetDocumentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.GetDocumentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDocumentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.GetDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.GetDocumentRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.firestore.v1.DocumentMask mask = 2;
  if (this->has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::mask(this), output);
  }

  // bytes transaction = 3;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->transaction(), output);
  }

  // .google.protobuf.Timestamp read_time = 5;
  if (has_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::read_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.GetDocumentRequest)
}

::google::protobuf::uint8* GetDocumentRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.GetDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.GetDocumentRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.firestore.v1.DocumentMask mask = 2;
  if (this->has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::mask(this), target);
  }

  // bytes transaction = 3;
  if (has_transaction()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->transaction(), target);
  }

  // .google.protobuf.Timestamp read_time = 5;
  if (has_read_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::read_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.GetDocumentRequest)
  return target;
}

size_t GetDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.GetDocumentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.firestore.v1.DocumentMask mask = 2;
  if (this->has_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  switch (consistency_selector_case()) {
    // bytes transaction = 3;
    case kTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction());
      break;
    }
    // .google.protobuf.Timestamp read_time = 5;
    case kReadTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *consistency_selector_.read_time_);
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDocumentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.GetDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDocumentRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.GetDocumentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.GetDocumentRequest)
    MergeFrom(*source);
  }
}

void GetDocumentRequest::MergeFrom(const GetDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.GetDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_mask()) {
    mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from.mask());
  }
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
}

void GetDocumentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.GetDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocumentRequest::CopyFrom(const GetDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.GetDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocumentRequest::IsInitialized() const {
  return true;
}

void GetDocumentRequest::Swap(GetDocumentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDocumentRequest::InternalSwap(GetDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mask_, other->mask_);
  swap(consistency_selector_, other->consistency_selector_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata GetDocumentRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListDocumentsRequest::InitAsDefaultInstance() {
  ::google::firestore::v1::_ListDocumentsRequest_default_instance_._instance.get_mutable()->mask_ = const_cast< ::google::firestore::v1::DocumentMask*>(
      ::google::firestore::v1::DocumentMask::internal_default_instance());
  ::google::firestore::v1::_ListDocumentsRequest_default_instance_.transaction_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::firestore::v1::_ListDocumentsRequest_default_instance_.read_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class ListDocumentsRequest::HasBitSetters {
 public:
  static const ::google::firestore::v1::DocumentMask& mask(const ListDocumentsRequest* msg);
  static const ::google::protobuf::Timestamp& read_time(const ListDocumentsRequest* msg);
};

const ::google::firestore::v1::DocumentMask&
ListDocumentsRequest::HasBitSetters::mask(const ListDocumentsRequest* msg) {
  return *msg->mask_;
}
const ::google::protobuf::Timestamp&
ListDocumentsRequest::HasBitSetters::read_time(const ListDocumentsRequest* msg) {
  return *msg->consistency_selector_.read_time_;
}
void ListDocumentsRequest::clear_mask() {
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
void ListDocumentsRequest::set_allocated_read_time(::google::protobuf::Timestamp* read_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_consistency_selector();
  if (read_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    consistency_selector_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListDocumentsRequest.read_time)
}
void ListDocumentsRequest::clear_read_time() {
  if (has_read_time()) {
    delete consistency_selector_.read_time_;
    clear_has_consistency_selector();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDocumentsRequest::kParentFieldNumber;
const int ListDocumentsRequest::kCollectionIdFieldNumber;
const int ListDocumentsRequest::kPageSizeFieldNumber;
const int ListDocumentsRequest::kPageTokenFieldNumber;
const int ListDocumentsRequest::kOrderByFieldNumber;
const int ListDocumentsRequest::kMaskFieldNumber;
const int ListDocumentsRequest::kTransactionFieldNumber;
const int ListDocumentsRequest::kReadTimeFieldNumber;
const int ListDocumentsRequest::kShowMissingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDocumentsRequest::ListDocumentsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.ListDocumentsRequest)
}
ListDocumentsRequest::ListDocumentsRequest(const ListDocumentsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  collection_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection_id().size() > 0) {
    collection_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_id_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.order_by().size() > 0) {
    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  ::memcpy(&page_size_, &from.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_missing_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(show_missing_));
  clear_has_consistency_selector();
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListDocumentsRequest)
}

void ListDocumentsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_missing_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(show_missing_));
  clear_has_consistency_selector();
}

ListDocumentsRequest::~ListDocumentsRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListDocumentsRequest)
  SharedDtor();
}

void ListDocumentsRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mask_;
  if (has_consistency_selector()) {
    clear_consistency_selector();
  }
}

void ListDocumentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDocumentsRequest& ListDocumentsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void ListDocumentsRequest::clear_consistency_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.ListDocumentsRequest)
  switch (consistency_selector_case()) {
    case kTransaction: {
      consistency_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kReadTime: {
      delete consistency_selector_.read_time_;
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSISTENCY_SELECTOR_NOT_SET;
}


void ListDocumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListDocumentsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_missing_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(show_missing_));
  clear_consistency_selector();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDocumentsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListDocumentsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListDocumentsRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string collection_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListDocumentsRequest.collection_id");
        object = msg->mutable_collection_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string page_token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListDocumentsRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string order_by = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListDocumentsRequest.order_by");
        object = msg->mutable_order_by();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.DocumentMask mask = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::DocumentMask::_InternalParse;
        object = msg->mutable_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes transaction = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transaction();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp read_time = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_read_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool show_missing = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_show_missing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDocumentsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.ListDocumentsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListDocumentsRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection_id().data(), static_cast<int>(this->collection_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListDocumentsRequest.collection_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListDocumentsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string order_by = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_by().data(), static_cast<int>(this->order_by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListDocumentsRequest.order_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.DocumentMask mask = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp read_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool show_missing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_missing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.ListDocumentsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.ListDocumentsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDocumentsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.ListDocumentsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string collection_id = 2;
  if (this->collection_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_id().data(), static_cast<int>(this->collection_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.collection_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection_id(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // string order_by = 6;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.order_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->order_by(), output);
  }

  // .google.firestore.v1.DocumentMask mask = 7;
  if (this->has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::mask(this), output);
  }

  // bytes transaction = 8;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->transaction(), output);
  }

  // .google.protobuf.Timestamp read_time = 10;
  if (has_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::read_time(this), output);
  }

  // bool show_missing = 12;
  if (this->show_missing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->show_missing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.ListDocumentsRequest)
}

::google::protobuf::uint8* ListDocumentsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListDocumentsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string collection_id = 2;
  if (this->collection_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_id().data(), static_cast<int>(this->collection_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.collection_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection_id(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // string order_by = 6;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.order_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->order_by(), target);
  }

  // .google.firestore.v1.DocumentMask mask = 7;
  if (this->has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::mask(this), target);
  }

  // bytes transaction = 8;
  if (has_transaction()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->transaction(), target);
  }

  // .google.protobuf.Timestamp read_time = 10;
  if (has_read_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::read_time(this), target);
  }

  // bool show_missing = 12;
  if (this->show_missing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->show_missing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListDocumentsRequest)
  return target;
}

size_t ListDocumentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListDocumentsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string collection_id = 2;
  if (this->collection_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection_id());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string order_by = 6;
  if (this->order_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_by());
  }

  // .google.firestore.v1.DocumentMask mask = 7;
  if (this->has_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // bool show_missing = 12;
  if (this->show_missing() != 0) {
    total_size += 1 + 1;
  }

  switch (consistency_selector_case()) {
    // bytes transaction = 8;
    case kTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction());
      break;
    }
    // .google.protobuf.Timestamp read_time = 10;
    case kReadTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *consistency_selector_.read_time_);
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDocumentsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.ListDocumentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDocumentsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListDocumentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.ListDocumentsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.ListDocumentsRequest)
    MergeFrom(*source);
  }
}

void ListDocumentsRequest::MergeFrom(const ListDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListDocumentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.collection_id().size() > 0) {

    collection_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_id_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.order_by().size() > 0) {

    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.has_mask()) {
    mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from.mask());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.show_missing() != 0) {
    set_show_missing(from.show_missing());
  }
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
}

void ListDocumentsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.ListDocumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDocumentsRequest::CopyFrom(const ListDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListDocumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDocumentsRequest::IsInitialized() const {
  return true;
}

void ListDocumentsRequest::Swap(ListDocumentsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDocumentsRequest::InternalSwap(ListDocumentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_id_.Swap(&other->collection_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_by_.Swap(&other->order_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mask_, other->mask_);
  swap(page_size_, other->page_size_);
  swap(show_missing_, other->show_missing_);
  swap(consistency_selector_, other->consistency_selector_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ListDocumentsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListDocumentsResponse::InitAsDefaultInstance() {
}
class ListDocumentsResponse::HasBitSetters {
 public:
};

void ListDocumentsResponse::clear_documents() {
  documents_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDocumentsResponse::kDocumentsFieldNumber;
const int ListDocumentsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDocumentsResponse::ListDocumentsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.ListDocumentsResponse)
}
ListDocumentsResponse::ListDocumentsResponse(const ListDocumentsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListDocumentsResponse)
}

void ListDocumentsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListDocumentsResponse::~ListDocumentsResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListDocumentsResponse)
  SharedDtor();
}

void ListDocumentsResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDocumentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDocumentsResponse& ListDocumentsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void ListDocumentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListDocumentsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDocumentsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListDocumentsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.firestore.v1.Document documents = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::firestore::v1::Document::_InternalParse;
          object = msg->add_documents();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListDocumentsResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDocumentsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.ListDocumentsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.firestore.v1.Document documents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListDocumentsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.ListDocumentsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.ListDocumentsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDocumentsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.ListDocumentsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.firestore.v1.Document documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->documents(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.ListDocumentsResponse)
}

::google::protobuf::uint8* ListDocumentsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListDocumentsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.firestore.v1.Document documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->documents(static_cast<int>(i)), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListDocumentsResponse)
  return target;
}

size_t ListDocumentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListDocumentsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.Document documents = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->documents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->documents(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDocumentsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.ListDocumentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDocumentsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListDocumentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.ListDocumentsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.ListDocumentsResponse)
    MergeFrom(*source);
  }
}

void ListDocumentsResponse::MergeFrom(const ListDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListDocumentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListDocumentsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.ListDocumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDocumentsResponse::CopyFrom(const ListDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListDocumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDocumentsResponse::IsInitialized() const {
  return true;
}

void ListDocumentsResponse::Swap(ListDocumentsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDocumentsResponse::InternalSwap(ListDocumentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&documents_)->InternalSwap(CastToBase(&other->documents_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListDocumentsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateDocumentRequest::InitAsDefaultInstance() {
  ::google::firestore::v1::_CreateDocumentRequest_default_instance_._instance.get_mutable()->document_ = const_cast< ::google::firestore::v1::Document*>(
      ::google::firestore::v1::Document::internal_default_instance());
  ::google::firestore::v1::_CreateDocumentRequest_default_instance_._instance.get_mutable()->mask_ = const_cast< ::google::firestore::v1::DocumentMask*>(
      ::google::firestore::v1::DocumentMask::internal_default_instance());
}
class CreateDocumentRequest::HasBitSetters {
 public:
  static const ::google::firestore::v1::Document& document(const CreateDocumentRequest* msg);
  static const ::google::firestore::v1::DocumentMask& mask(const CreateDocumentRequest* msg);
};

const ::google::firestore::v1::Document&
CreateDocumentRequest::HasBitSetters::document(const CreateDocumentRequest* msg) {
  return *msg->document_;
}
const ::google::firestore::v1::DocumentMask&
CreateDocumentRequest::HasBitSetters::mask(const CreateDocumentRequest* msg) {
  return *msg->mask_;
}
void CreateDocumentRequest::clear_document() {
  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
void CreateDocumentRequest::clear_mask() {
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDocumentRequest::kParentFieldNumber;
const int CreateDocumentRequest::kCollectionIdFieldNumber;
const int CreateDocumentRequest::kDocumentIdFieldNumber;
const int CreateDocumentRequest::kDocumentFieldNumber;
const int CreateDocumentRequest::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDocumentRequest::CreateDocumentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.CreateDocumentRequest)
}
CreateDocumentRequest::CreateDocumentRequest(const CreateDocumentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  collection_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection_id().size() > 0) {
    collection_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_id_);
  }
  document_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document_id().size() > 0) {
    document_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_id_);
  }
  if (from.has_document()) {
    document_ = new ::google::firestore::v1::Document(*from.document_);
  } else {
    document_ = nullptr;
  }
  if (from.has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.CreateDocumentRequest)
}

void CreateDocumentRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&document_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_) -
      reinterpret_cast<char*>(&document_)) + sizeof(mask_));
}

CreateDocumentRequest::~CreateDocumentRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.CreateDocumentRequest)
  SharedDtor();
}

void CreateDocumentRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
  if (this != internal_default_instance()) delete mask_;
}

void CreateDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDocumentRequest& CreateDocumentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void CreateDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.CreateDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateDocumentRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateDocumentRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.CreateDocumentRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string collection_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.CreateDocumentRequest.collection_id");
        object = msg->mutable_collection_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string document_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.CreateDocumentRequest.document_id");
        object = msg->mutable_document_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.Document document = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::Document::_InternalParse;
        object = msg->mutable_document();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.firestore.v1.DocumentMask mask = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::DocumentMask::_InternalParse;
        object = msg->mutable_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateDocumentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.CreateDocumentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.CreateDocumentRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection_id().data(), static_cast<int>(this->collection_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.CreateDocumentRequest.collection_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string document_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_document_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->document_id().data(), static_cast<int>(this->document_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.CreateDocumentRequest.document_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.Document document = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.DocumentMask mask = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.CreateDocumentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.CreateDocumentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateDocumentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.CreateDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CreateDocumentRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string collection_id = 2;
  if (this->collection_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_id().data(), static_cast<int>(this->collection_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CreateDocumentRequest.collection_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection_id(), output);
  }

  // string document_id = 3;
  if (this->document_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document_id().data(), static_cast<int>(this->document_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CreateDocumentRequest.document_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->document_id(), output);
  }

  // .google.firestore.v1.Document document = 4;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::document(this), output);
  }

  // .google.firestore.v1.DocumentMask mask = 5;
  if (this->has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.CreateDocumentRequest)
}

::google::protobuf::uint8* CreateDocumentRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.CreateDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CreateDocumentRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string collection_id = 2;
  if (this->collection_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_id().data(), static_cast<int>(this->collection_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CreateDocumentRequest.collection_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection_id(), target);
  }

  // string document_id = 3;
  if (this->document_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->document_id().data(), static_cast<int>(this->document_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CreateDocumentRequest.document_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->document_id(), target);
  }

  // .google.firestore.v1.Document document = 4;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::document(this), target);
  }

  // .google.firestore.v1.DocumentMask mask = 5;
  if (this->has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.CreateDocumentRequest)
  return target;
}

size_t CreateDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.CreateDocumentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string collection_id = 2;
  if (this->collection_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection_id());
  }

  // string document_id = 3;
  if (this->document_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->document_id());
  }

  // .google.firestore.v1.Document document = 4;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // .google.firestore.v1.DocumentMask mask = 5;
  if (this->has_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDocumentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.CreateDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDocumentRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.CreateDocumentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.CreateDocumentRequest)
    MergeFrom(*source);
  }
}

void CreateDocumentRequest::MergeFrom(const CreateDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.CreateDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.collection_id().size() > 0) {

    collection_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_id_);
  }
  if (from.document_id().size() > 0) {

    document_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_id_);
  }
  if (from.has_document()) {
    mutable_document()->::google::firestore::v1::Document::MergeFrom(from.document());
  }
  if (from.has_mask()) {
    mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from.mask());
  }
}

void CreateDocumentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.CreateDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDocumentRequest::CopyFrom(const CreateDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.CreateDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDocumentRequest::IsInitialized() const {
  return true;
}

void CreateDocumentRequest::Swap(CreateDocumentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDocumentRequest::InternalSwap(CreateDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_id_.Swap(&other->collection_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  document_id_.Swap(&other->document_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(document_, other->document_);
  swap(mask_, other->mask_);
}

::google::protobuf::Metadata CreateDocumentRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateDocumentRequest::InitAsDefaultInstance() {
  ::google::firestore::v1::_UpdateDocumentRequest_default_instance_._instance.get_mutable()->document_ = const_cast< ::google::firestore::v1::Document*>(
      ::google::firestore::v1::Document::internal_default_instance());
  ::google::firestore::v1::_UpdateDocumentRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::firestore::v1::DocumentMask*>(
      ::google::firestore::v1::DocumentMask::internal_default_instance());
  ::google::firestore::v1::_UpdateDocumentRequest_default_instance_._instance.get_mutable()->mask_ = const_cast< ::google::firestore::v1::DocumentMask*>(
      ::google::firestore::v1::DocumentMask::internal_default_instance());
  ::google::firestore::v1::_UpdateDocumentRequest_default_instance_._instance.get_mutable()->current_document_ = const_cast< ::google::firestore::v1::Precondition*>(
      ::google::firestore::v1::Precondition::internal_default_instance());
}
class UpdateDocumentRequest::HasBitSetters {
 public:
  static const ::google::firestore::v1::Document& document(const UpdateDocumentRequest* msg);
  static const ::google::firestore::v1::DocumentMask& update_mask(const UpdateDocumentRequest* msg);
  static const ::google::firestore::v1::DocumentMask& mask(const UpdateDocumentRequest* msg);
  static const ::google::firestore::v1::Precondition& current_document(const UpdateDocumentRequest* msg);
};

const ::google::firestore::v1::Document&
UpdateDocumentRequest::HasBitSetters::document(const UpdateDocumentRequest* msg) {
  return *msg->document_;
}
const ::google::firestore::v1::DocumentMask&
UpdateDocumentRequest::HasBitSetters::update_mask(const UpdateDocumentRequest* msg) {
  return *msg->update_mask_;
}
const ::google::firestore::v1::DocumentMask&
UpdateDocumentRequest::HasBitSetters::mask(const UpdateDocumentRequest* msg) {
  return *msg->mask_;
}
const ::google::firestore::v1::Precondition&
UpdateDocumentRequest::HasBitSetters::current_document(const UpdateDocumentRequest* msg) {
  return *msg->current_document_;
}
void UpdateDocumentRequest::clear_document() {
  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
void UpdateDocumentRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
void UpdateDocumentRequest::clear_mask() {
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
void UpdateDocumentRequest::clear_current_document() {
  if (GetArenaNoVirtual() == nullptr && current_document_ != nullptr) {
    delete current_document_;
  }
  current_document_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDocumentRequest::kDocumentFieldNumber;
const int UpdateDocumentRequest::kUpdateMaskFieldNumber;
const int UpdateDocumentRequest::kMaskFieldNumber;
const int UpdateDocumentRequest::kCurrentDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDocumentRequest::UpdateDocumentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.UpdateDocumentRequest)
}
UpdateDocumentRequest::UpdateDocumentRequest(const UpdateDocumentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document()) {
    document_ = new ::google::firestore::v1::Document(*from.document_);
  } else {
    document_ = nullptr;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::firestore::v1::DocumentMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  if (from.has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  if (from.has_current_document()) {
    current_document_ = new ::google::firestore::v1::Precondition(*from.current_document_);
  } else {
    current_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.UpdateDocumentRequest)
}

void UpdateDocumentRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::memset(&document_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_document_) -
      reinterpret_cast<char*>(&document_)) + sizeof(current_document_));
}

UpdateDocumentRequest::~UpdateDocumentRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.UpdateDocumentRequest)
  SharedDtor();
}

void UpdateDocumentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete document_;
  if (this != internal_default_instance()) delete update_mask_;
  if (this != internal_default_instance()) delete mask_;
  if (this != internal_default_instance()) delete current_document_;
}

void UpdateDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDocumentRequest& UpdateDocumentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void UpdateDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.UpdateDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && current_document_ != nullptr) {
    delete current_document_;
  }
  current_document_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateDocumentRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateDocumentRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.firestore.v1.Document document = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::Document::_InternalParse;
        object = msg->mutable_document();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.firestore.v1.DocumentMask update_mask = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::DocumentMask::_InternalParse;
        object = msg->mutable_update_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.firestore.v1.DocumentMask mask = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::DocumentMask::_InternalParse;
        object = msg->mutable_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.firestore.v1.Precondition current_document = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::Precondition::_InternalParse;
        object = msg->mutable_current_document();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateDocumentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.UpdateDocumentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.firestore.v1.Document document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.DocumentMask update_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.DocumentMask mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.Precondition current_document = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_current_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.UpdateDocumentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.UpdateDocumentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateDocumentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.UpdateDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::document(this), output);
  }

  // .google.firestore.v1.DocumentMask update_mask = 2;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::update_mask(this), output);
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::mask(this), output);
  }

  // .google.firestore.v1.Precondition current_document = 4;
  if (this->has_current_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::current_document(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.UpdateDocumentRequest)
}

::google::protobuf::uint8* UpdateDocumentRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.UpdateDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::document(this), target);
  }

  // .google.firestore.v1.DocumentMask update_mask = 2;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::update_mask(this), target);
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::mask(this), target);
  }

  // .google.firestore.v1.Precondition current_document = 4;
  if (this->has_current_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::current_document(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.UpdateDocumentRequest)
  return target;
}

size_t UpdateDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.UpdateDocumentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.firestore.v1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // .google.firestore.v1.DocumentMask update_mask = 2;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->has_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // .google.firestore.v1.Precondition current_document = 4;
  if (this->has_current_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *current_document_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDocumentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.UpdateDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDocumentRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.UpdateDocumentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.UpdateDocumentRequest)
    MergeFrom(*source);
  }
}

void UpdateDocumentRequest::MergeFrom(const UpdateDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.UpdateDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_document()) {
    mutable_document()->::google::firestore::v1::Document::MergeFrom(from.document());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from.update_mask());
  }
  if (from.has_mask()) {
    mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from.mask());
  }
  if (from.has_current_document()) {
    mutable_current_document()->::google::firestore::v1::Precondition::MergeFrom(from.current_document());
  }
}

void UpdateDocumentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.UpdateDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDocumentRequest::CopyFrom(const UpdateDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.UpdateDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDocumentRequest::IsInitialized() const {
  return true;
}

void UpdateDocumentRequest::Swap(UpdateDocumentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDocumentRequest::InternalSwap(UpdateDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(document_, other->document_);
  swap(update_mask_, other->update_mask_);
  swap(mask_, other->mask_);
  swap(current_document_, other->current_document_);
}

::google::protobuf::Metadata UpdateDocumentRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteDocumentRequest::InitAsDefaultInstance() {
  ::google::firestore::v1::_DeleteDocumentRequest_default_instance_._instance.get_mutable()->current_document_ = const_cast< ::google::firestore::v1::Precondition*>(
      ::google::firestore::v1::Precondition::internal_default_instance());
}
class DeleteDocumentRequest::HasBitSetters {
 public:
  static const ::google::firestore::v1::Precondition& current_document(const DeleteDocumentRequest* msg);
};

const ::google::firestore::v1::Precondition&
DeleteDocumentRequest::HasBitSetters::current_document(const DeleteDocumentRequest* msg) {
  return *msg->current_document_;
}
void DeleteDocumentRequest::clear_current_document() {
  if (GetArenaNoVirtual() == nullptr && current_document_ != nullptr) {
    delete current_document_;
  }
  current_document_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteDocumentRequest::kNameFieldNumber;
const int DeleteDocumentRequest::kCurrentDocumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDocumentRequest::DeleteDocumentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.DeleteDocumentRequest)
}
DeleteDocumentRequest::DeleteDocumentRequest(const DeleteDocumentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_current_document()) {
    current_document_ = new ::google::firestore::v1::Precondition(*from.current_document_);
  } else {
    current_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.DeleteDocumentRequest)
}

void DeleteDocumentRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_document_ = nullptr;
}

DeleteDocumentRequest::~DeleteDocumentRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.DeleteDocumentRequest)
  SharedDtor();
}

void DeleteDocumentRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_document_;
}

void DeleteDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDocumentRequest& DeleteDocumentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteDocumentRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void DeleteDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.DeleteDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && current_document_ != nullptr) {
    delete current_document_;
  }
  current_document_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteDocumentRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteDocumentRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.DeleteDocumentRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.Precondition current_document = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::Precondition::_InternalParse;
        object = msg->mutable_current_document();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteDocumentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.DeleteDocumentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.DeleteDocumentRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.Precondition current_document = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_current_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.DeleteDocumentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.DeleteDocumentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteDocumentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.DeleteDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.DeleteDocumentRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.firestore.v1.Precondition current_document = 2;
  if (this->has_current_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::current_document(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.DeleteDocumentRequest)
}

::google::protobuf::uint8* DeleteDocumentRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.DeleteDocumentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.DeleteDocumentRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.firestore.v1.Precondition current_document = 2;
  if (this->has_current_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::current_document(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.DeleteDocumentRequest)
  return target;
}

size_t DeleteDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.DeleteDocumentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.firestore.v1.Precondition current_document = 2;
  if (this->has_current_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *current_document_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDocumentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.DeleteDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDocumentRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.DeleteDocumentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.DeleteDocumentRequest)
    MergeFrom(*source);
  }
}

void DeleteDocumentRequest::MergeFrom(const DeleteDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.DeleteDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_current_document()) {
    mutable_current_document()->::google::firestore::v1::Precondition::MergeFrom(from.current_document());
  }
}

void DeleteDocumentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.DeleteDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDocumentRequest::CopyFrom(const DeleteDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.DeleteDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDocumentRequest::IsInitialized() const {
  return true;
}

void DeleteDocumentRequest::Swap(DeleteDocumentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteDocumentRequest::InternalSwap(DeleteDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(current_document_, other->current_document_);
}

::google::protobuf::Metadata DeleteDocumentRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BatchGetDocumentsRequest::InitAsDefaultInstance() {
  ::google::firestore::v1::_BatchGetDocumentsRequest_default_instance_._instance.get_mutable()->mask_ = const_cast< ::google::firestore::v1::DocumentMask*>(
      ::google::firestore::v1::DocumentMask::internal_default_instance());
  ::google::firestore::v1::_BatchGetDocumentsRequest_default_instance_.transaction_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::firestore::v1::_BatchGetDocumentsRequest_default_instance_.new_transaction_ = const_cast< ::google::firestore::v1::TransactionOptions*>(
      ::google::firestore::v1::TransactionOptions::internal_default_instance());
  ::google::firestore::v1::_BatchGetDocumentsRequest_default_instance_.read_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class BatchGetDocumentsRequest::HasBitSetters {
 public:
  static const ::google::firestore::v1::DocumentMask& mask(const BatchGetDocumentsRequest* msg);
  static const ::google::firestore::v1::TransactionOptions& new_transaction(const BatchGetDocumentsRequest* msg);
  static const ::google::protobuf::Timestamp& read_time(const BatchGetDocumentsRequest* msg);
};

const ::google::firestore::v1::DocumentMask&
BatchGetDocumentsRequest::HasBitSetters::mask(const BatchGetDocumentsRequest* msg) {
  return *msg->mask_;
}
const ::google::firestore::v1::TransactionOptions&
BatchGetDocumentsRequest::HasBitSetters::new_transaction(const BatchGetDocumentsRequest* msg) {
  return *msg->consistency_selector_.new_transaction_;
}
const ::google::protobuf::Timestamp&
BatchGetDocumentsRequest::HasBitSetters::read_time(const BatchGetDocumentsRequest* msg) {
  return *msg->consistency_selector_.read_time_;
}
void BatchGetDocumentsRequest::clear_mask() {
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
void BatchGetDocumentsRequest::set_allocated_new_transaction(::google::firestore::v1::TransactionOptions* new_transaction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_consistency_selector();
  if (new_transaction) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_transaction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_transaction, submessage_arena);
    }
    set_has_new_transaction();
    consistency_selector_.new_transaction_ = new_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BatchGetDocumentsRequest.new_transaction)
}
void BatchGetDocumentsRequest::clear_new_transaction() {
  if (has_new_transaction()) {
    delete consistency_selector_.new_transaction_;
    clear_has_consistency_selector();
  }
}
void BatchGetDocumentsRequest::set_allocated_read_time(::google::protobuf::Timestamp* read_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_consistency_selector();
  if (read_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    consistency_selector_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BatchGetDocumentsRequest.read_time)
}
void BatchGetDocumentsRequest::clear_read_time() {
  if (has_read_time()) {
    delete consistency_selector_.read_time_;
    clear_has_consistency_selector();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetDocumentsRequest::kDatabaseFieldNumber;
const int BatchGetDocumentsRequest::kDocumentsFieldNumber;
const int BatchGetDocumentsRequest::kMaskFieldNumber;
const int BatchGetDocumentsRequest::kTransactionFieldNumber;
const int BatchGetDocumentsRequest::kNewTransactionFieldNumber;
const int BatchGetDocumentsRequest::kReadTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetDocumentsRequest::BatchGetDocumentsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.BatchGetDocumentsRequest)
}
BatchGetDocumentsRequest::BatchGetDocumentsRequest(const BatchGetDocumentsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  if (from.has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  clear_has_consistency_selector();
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case kNewTransaction: {
      mutable_new_transaction()->::google::firestore::v1::TransactionOptions::MergeFrom(from.new_transaction());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.BatchGetDocumentsRequest)
}

void BatchGetDocumentsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BatchGetDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_ = nullptr;
  clear_has_consistency_selector();
}

BatchGetDocumentsRequest::~BatchGetDocumentsRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.BatchGetDocumentsRequest)
  SharedDtor();
}

void BatchGetDocumentsRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mask_;
  if (has_consistency_selector()) {
    clear_consistency_selector();
  }
}

void BatchGetDocumentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchGetDocumentsRequest& BatchGetDocumentsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BatchGetDocumentsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void BatchGetDocumentsRequest::clear_consistency_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.BatchGetDocumentsRequest)
  switch (consistency_selector_case()) {
    case kTransaction: {
      consistency_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kNewTransaction: {
      delete consistency_selector_.new_transaction_;
      break;
    }
    case kReadTime: {
      delete consistency_selector_.read_time_;
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSISTENCY_SELECTOR_NOT_SET;
}


void BatchGetDocumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.BatchGetDocumentsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  clear_consistency_selector();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchGetDocumentsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BatchGetDocumentsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string database = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.BatchGetDocumentsRequest.database");
        object = msg->mutable_database();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string documents = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.firestore.v1.BatchGetDocumentsRequest.documents");
          object = msg->add_documents();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .google.firestore.v1.DocumentMask mask = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::DocumentMask::_InternalParse;
        object = msg->mutable_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes transaction = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transaction();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.TransactionOptions new_transaction = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::TransactionOptions::_InternalParse;
        object = msg->mutable_new_transaction();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp read_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_read_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchGetDocumentsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.BatchGetDocumentsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), static_cast<int>(this->database().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.BatchGetDocumentsRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string documents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_documents()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->documents(this->documents_size() - 1).data(),
            static_cast<int>(this->documents(this->documents_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.BatchGetDocumentsRequest.documents"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.DocumentMask mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.TransactionOptions new_transaction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp read_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.BatchGetDocumentsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.BatchGetDocumentsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchGetDocumentsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.BatchGetDocumentsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BatchGetDocumentsRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // repeated string documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->documents(i).data(), static_cast<int>(this->documents(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BatchGetDocumentsRequest.documents");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->documents(i), output);
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::mask(this), output);
  }

  // bytes transaction = 4;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transaction(), output);
  }

  // .google.firestore.v1.TransactionOptions new_transaction = 5;
  if (has_new_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::new_transaction(this), output);
  }

  // .google.protobuf.Timestamp read_time = 7;
  if (has_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::read_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.BatchGetDocumentsRequest)
}

::google::protobuf::uint8* BatchGetDocumentsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.BatchGetDocumentsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BatchGetDocumentsRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // repeated string documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->documents(i).data(), static_cast<int>(this->documents(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BatchGetDocumentsRequest.documents");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->documents(i), target);
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::mask(this), target);
  }

  // bytes transaction = 4;
  if (has_transaction()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transaction(), target);
  }

  // .google.firestore.v1.TransactionOptions new_transaction = 5;
  if (has_new_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::new_transaction(this), target);
  }

  // .google.protobuf.Timestamp read_time = 7;
  if (has_read_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::read_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.BatchGetDocumentsRequest)
  return target;
}

size_t BatchGetDocumentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.BatchGetDocumentsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string documents = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->documents_size());
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->documents(i));
  }

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->has_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  switch (consistency_selector_case()) {
    // bytes transaction = 4;
    case kTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction());
      break;
    }
    // .google.firestore.v1.TransactionOptions new_transaction = 5;
    case kNewTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *consistency_selector_.new_transaction_);
      break;
    }
    // .google.protobuf.Timestamp read_time = 7;
    case kReadTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *consistency_selector_.read_time_);
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchGetDocumentsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.BatchGetDocumentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetDocumentsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BatchGetDocumentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.BatchGetDocumentsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.BatchGetDocumentsRequest)
    MergeFrom(*source);
  }
}

void BatchGetDocumentsRequest::MergeFrom(const BatchGetDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.BatchGetDocumentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  if (from.has_mask()) {
    mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from.mask());
  }
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case kNewTransaction: {
      mutable_new_transaction()->::google::firestore::v1::TransactionOptions::MergeFrom(from.new_transaction());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
}

void BatchGetDocumentsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.BatchGetDocumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetDocumentsRequest::CopyFrom(const BatchGetDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.BatchGetDocumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetDocumentsRequest::IsInitialized() const {
  return true;
}

void BatchGetDocumentsRequest::Swap(BatchGetDocumentsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetDocumentsRequest::InternalSwap(BatchGetDocumentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  documents_.InternalSwap(CastToBase(&other->documents_));
  database_.Swap(&other->database_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mask_, other->mask_);
  swap(consistency_selector_, other->consistency_selector_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata BatchGetDocumentsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BatchGetDocumentsResponse::InitAsDefaultInstance() {
  ::google::firestore::v1::_BatchGetDocumentsResponse_default_instance_.found_ = const_cast< ::google::firestore::v1::Document*>(
      ::google::firestore::v1::Document::internal_default_instance());
  ::google::firestore::v1::_BatchGetDocumentsResponse_default_instance_.missing_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::firestore::v1::_BatchGetDocumentsResponse_default_instance_._instance.get_mutable()->read_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class BatchGetDocumentsResponse::HasBitSetters {
 public:
  static const ::google::firestore::v1::Document& found(const BatchGetDocumentsResponse* msg);
  static const ::google::protobuf::Timestamp& read_time(const BatchGetDocumentsResponse* msg);
};

const ::google::firestore::v1::Document&
BatchGetDocumentsResponse::HasBitSetters::found(const BatchGetDocumentsResponse* msg) {
  return *msg->result_.found_;
}
const ::google::protobuf::Timestamp&
BatchGetDocumentsResponse::HasBitSetters::read_time(const BatchGetDocumentsResponse* msg) {
  return *msg->read_time_;
}
void BatchGetDocumentsResponse::set_allocated_found(::google::firestore::v1::Document* found) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (found) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      found = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, found, submessage_arena);
    }
    set_has_found();
    result_.found_ = found;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BatchGetDocumentsResponse.found)
}
void BatchGetDocumentsResponse::clear_found() {
  if (has_found()) {
    delete result_.found_;
    clear_has_result();
  }
}
void BatchGetDocumentsResponse::clear_read_time() {
  if (GetArenaNoVirtual() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetDocumentsResponse::kFoundFieldNumber;
const int BatchGetDocumentsResponse::kMissingFieldNumber;
const int BatchGetDocumentsResponse::kTransactionFieldNumber;
const int BatchGetDocumentsResponse::kReadTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetDocumentsResponse::BatchGetDocumentsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.BatchGetDocumentsResponse)
}
BatchGetDocumentsResponse::BatchGetDocumentsResponse(const BatchGetDocumentsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction().size() > 0) {
    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  if (from.has_read_time()) {
    read_time_ = new ::google::protobuf::Timestamp(*from.read_time_);
  } else {
    read_time_ = nullptr;
  }
  clear_has_result();
  switch (from.result_case()) {
    case kFound: {
      mutable_found()->::google::firestore::v1::Document::MergeFrom(from.found());
      break;
    }
    case kMissing: {
      set_missing(from.missing());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.BatchGetDocumentsResponse)
}

void BatchGetDocumentsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BatchGetDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_time_ = nullptr;
  clear_has_result();
}

BatchGetDocumentsResponse::~BatchGetDocumentsResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.BatchGetDocumentsResponse)
  SharedDtor();
}

void BatchGetDocumentsResponse::SharedDtor() {
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete read_time_;
  if (has_result()) {
    clear_result();
  }
}

void BatchGetDocumentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchGetDocumentsResponse& BatchGetDocumentsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BatchGetDocumentsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void BatchGetDocumentsResponse::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.BatchGetDocumentsResponse)
  switch (result_case()) {
    case kFound: {
      delete result_.found_;
      break;
    }
    case kMissing: {
      result_.missing_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void BatchGetDocumentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.BatchGetDocumentsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
  clear_result();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchGetDocumentsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BatchGetDocumentsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.firestore.v1.Document found = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::Document::_InternalParse;
        object = msg->mutable_found();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string missing = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.BatchGetDocumentsResponse.missing");
        object = msg->mutable_missing();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes transaction = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transaction();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp read_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_read_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchGetDocumentsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.BatchGetDocumentsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.firestore.v1.Document found = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_found()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string missing = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_missing()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->missing().data(), static_cast<int>(this->missing().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.BatchGetDocumentsResponse.missing"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp read_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.BatchGetDocumentsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.BatchGetDocumentsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchGetDocumentsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.BatchGetDocumentsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Document found = 1;
  if (has_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::found(this), output);
  }

  // string missing = 2;
  if (has_missing()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->missing().data(), static_cast<int>(this->missing().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BatchGetDocumentsResponse.missing");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->missing(), output);
  }

  // bytes transaction = 3;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->transaction(), output);
  }

  // .google.protobuf.Timestamp read_time = 4;
  if (this->has_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::read_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.BatchGetDocumentsResponse)
}

::google::protobuf::uint8* BatchGetDocumentsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.BatchGetDocumentsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Document found = 1;
  if (has_found()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::found(this), target);
  }

  // string missing = 2;
  if (has_missing()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->missing().data(), static_cast<int>(this->missing().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BatchGetDocumentsResponse.missing");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->missing(), target);
  }

  // bytes transaction = 3;
  if (this->transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->transaction(), target);
  }

  // .google.protobuf.Timestamp read_time = 4;
  if (this->has_read_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::read_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.BatchGetDocumentsResponse)
  return target;
}

size_t BatchGetDocumentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.BatchGetDocumentsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction = 3;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction());
  }

  // .google.protobuf.Timestamp read_time = 4;
  if (this->has_read_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *read_time_);
  }

  switch (result_case()) {
    // .google.firestore.v1.Document found = 1;
    case kFound: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.found_);
      break;
    }
    // string missing = 2;
    case kMissing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->missing());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchGetDocumentsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.BatchGetDocumentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetDocumentsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<BatchGetDocumentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.BatchGetDocumentsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.BatchGetDocumentsResponse)
    MergeFrom(*source);
  }
}

void BatchGetDocumentsResponse::MergeFrom(const BatchGetDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.BatchGetDocumentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  if (from.has_read_time()) {
    mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
  }
  switch (from.result_case()) {
    case kFound: {
      mutable_found()->::google::firestore::v1::Document::MergeFrom(from.found());
      break;
    }
    case kMissing: {
      set_missing(from.missing());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void BatchGetDocumentsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.BatchGetDocumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetDocumentsResponse::CopyFrom(const BatchGetDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.BatchGetDocumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetDocumentsResponse::IsInitialized() const {
  return true;
}

void BatchGetDocumentsResponse::Swap(BatchGetDocumentsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetDocumentsResponse::InternalSwap(BatchGetDocumentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transaction_.Swap(&other->transaction_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(read_time_, other->read_time_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata BatchGetDocumentsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeginTransactionRequest::InitAsDefaultInstance() {
  ::google::firestore::v1::_BeginTransactionRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::google::firestore::v1::TransactionOptions*>(
      ::google::firestore::v1::TransactionOptions::internal_default_instance());
}
class BeginTransactionRequest::HasBitSetters {
 public:
  static const ::google::firestore::v1::TransactionOptions& options(const BeginTransactionRequest* msg);
};

const ::google::firestore::v1::TransactionOptions&
BeginTransactionRequest::HasBitSetters::options(const BeginTransactionRequest* msg) {
  return *msg->options_;
}
void BeginTransactionRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginTransactionRequest::kDatabaseFieldNumber;
const int BeginTransactionRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginTransactionRequest::BeginTransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.BeginTransactionRequest)
}
BeginTransactionRequest::BeginTransactionRequest(const BeginTransactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  if (from.has_options()) {
    options_ = new ::google::firestore::v1::TransactionOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.BeginTransactionRequest)
}

void BeginTransactionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeginTransactionRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

BeginTransactionRequest::~BeginTransactionRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.BeginTransactionRequest)
  SharedDtor();
}

void BeginTransactionRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void BeginTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginTransactionRequest& BeginTransactionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeginTransactionRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void BeginTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.BeginTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeginTransactionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeginTransactionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string database = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.BeginTransactionRequest.database");
        object = msg->mutable_database();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.TransactionOptions options = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::TransactionOptions::_InternalParse;
        object = msg->mutable_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeginTransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.BeginTransactionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), static_cast<int>(this->database().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.BeginTransactionRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.TransactionOptions options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.BeginTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.BeginTransactionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeginTransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.BeginTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BeginTransactionRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // .google.firestore.v1.TransactionOptions options = 2;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.BeginTransactionRequest)
}

::google::protobuf::uint8* BeginTransactionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.BeginTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BeginTransactionRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // .google.firestore.v1.TransactionOptions options = 2;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.BeginTransactionRequest)
  return target;
}

size_t BeginTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.BeginTransactionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  // .google.firestore.v1.TransactionOptions options = 2;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginTransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.BeginTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BeginTransactionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BeginTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.BeginTransactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.BeginTransactionRequest)
    MergeFrom(*source);
  }
}

void BeginTransactionRequest::MergeFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.BeginTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  if (from.has_options()) {
    mutable_options()->::google::firestore::v1::TransactionOptions::MergeFrom(from.options());
  }
}

void BeginTransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.BeginTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginTransactionRequest::CopyFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.BeginTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginTransactionRequest::IsInitialized() const {
  return true;
}

void BeginTransactionRequest::Swap(BeginTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginTransactionRequest::InternalSwap(BeginTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  database_.Swap(&other->database_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::google::protobuf::Metadata BeginTransactionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeginTransactionResponse::InitAsDefaultInstance() {
}
class BeginTransactionResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginTransactionResponse::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginTransactionResponse::BeginTransactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.BeginTransactionResponse)
}
BeginTransactionResponse::BeginTransactionResponse(const BeginTransactionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction().size() > 0) {
    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.BeginTransactionResponse)
}

void BeginTransactionResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeginTransactionResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BeginTransactionResponse::~BeginTransactionResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.BeginTransactionResponse)
  SharedDtor();
}

void BeginTransactionResponse::SharedDtor() {
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeginTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginTransactionResponse& BeginTransactionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeginTransactionResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void BeginTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.BeginTransactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeginTransactionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeginTransactionResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes transaction = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transaction();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeginTransactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.BeginTransactionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes transaction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.BeginTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.BeginTransactionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeginTransactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.BeginTransactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->transaction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.BeginTransactionResponse)
}

::google::protobuf::uint8* BeginTransactionResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.BeginTransactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->transaction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.BeginTransactionResponse)
  return target;
}

size_t BeginTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.BeginTransactionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginTransactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.BeginTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BeginTransactionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<BeginTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.BeginTransactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.BeginTransactionResponse)
    MergeFrom(*source);
  }
}

void BeginTransactionResponse::MergeFrom(const BeginTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.BeginTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
}

void BeginTransactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.BeginTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginTransactionResponse::CopyFrom(const BeginTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.BeginTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginTransactionResponse::IsInitialized() const {
  return true;
}

void BeginTransactionResponse::Swap(BeginTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginTransactionResponse::InternalSwap(BeginTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transaction_.Swap(&other->transaction_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BeginTransactionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CommitRequest::InitAsDefaultInstance() {
}
class CommitRequest::HasBitSetters {
 public:
};

void CommitRequest::clear_writes() {
  writes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kDatabaseFieldNumber;
const int CommitRequest::kWritesFieldNumber;
const int CommitRequest::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.CommitRequest)
}
CommitRequest::CommitRequest(const CommitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      writes_(from.writes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction().size() > 0) {
    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.CommitRequest)
}

void CommitRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CommitRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitRequest& CommitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CommitRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.CommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  writes_.Clear();
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CommitRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string database = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.CommitRequest.database");
        object = msg->mutable_database();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.firestore.v1.Write writes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::firestore::v1::Write::_InternalParse;
          object = msg->add_writes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // bytes transaction = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transaction();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.CommitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), static_cast<int>(this->database().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.CommitRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.firestore.v1.Write writes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.CommitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.CommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CommitRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // repeated .google.firestore.v1.Write writes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->writes(static_cast<int>(i)),
      output);
  }

  // bytes transaction = 3;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->transaction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.CommitRequest)
}

::google::protobuf::uint8* CommitRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.CommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CommitRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // repeated .google.firestore.v1.Write writes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->writes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->writes(static_cast<int>(i)), target);
  }

  // bytes transaction = 3;
  if (this->transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->transaction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.CommitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.Write writes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->writes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->writes(static_cast<int>(i)));
    }
  }

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  // bytes transaction = 3;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CommitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.CommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.CommitRequest)
    MergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  writes_.MergeFrom(from.writes_);
  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
}

void CommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {
  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&writes_)->InternalSwap(CastToBase(&other->writes_));
  database_.Swap(&other->database_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_.Swap(&other->transaction_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CommitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CommitResponse::InitAsDefaultInstance() {
  ::google::firestore::v1::_CommitResponse_default_instance_._instance.get_mutable()->commit_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class CommitResponse::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& commit_time(const CommitResponse* msg);
};

const ::google::protobuf::Timestamp&
CommitResponse::HasBitSetters::commit_time(const CommitResponse* msg) {
  return *msg->commit_time_;
}
void CommitResponse::clear_write_results() {
  write_results_.Clear();
}
void CommitResponse::clear_commit_time() {
  if (GetArenaNoVirtual() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kWriteResultsFieldNumber;
const int CommitResponse::kCommitTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.CommitResponse)
}
CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      write_results_(from.write_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_commit_time()) {
    commit_time_ = new ::google::protobuf::Timestamp(*from.commit_time_);
  } else {
    commit_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.CommitResponse)
}

void CommitResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CommitResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  commit_time_ = nullptr;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete commit_time_;
}

void CommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitResponse& CommitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CommitResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.CommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_results_.Clear();
  if (GetArenaNoVirtual() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CommitResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.firestore.v1.WriteResult write_results = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::firestore::v1::WriteResult::_InternalParse;
          object = msg->add_write_results();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.protobuf.Timestamp commit_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_commit_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.CommitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.firestore.v1.WriteResult write_results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_write_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp commit_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.CommitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.CommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.firestore.v1.WriteResult write_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->write_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->write_results(static_cast<int>(i)),
      output);
  }

  // .google.protobuf.Timestamp commit_time = 2;
  if (this->has_commit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::commit_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.CommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.firestore.v1.WriteResult write_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->write_results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->write_results(static_cast<int>(i)), target);
  }

  // .google.protobuf.Timestamp commit_time = 2;
  if (this->has_commit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::commit_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.CommitResponse)
  return target;
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.CommitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.WriteResult write_results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->write_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->write_results(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Timestamp commit_time = 2;
  if (this->has_commit_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *commit_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CommitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.CommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.CommitResponse)
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_results_.MergeFrom(from.write_results_);
  if (from.has_commit_time()) {
    mutable_commit_time()->::google::protobuf::Timestamp::MergeFrom(from.commit_time());
  }
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {
  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&write_results_)->InternalSwap(CastToBase(&other->write_results_));
  swap(commit_time_, other->commit_time_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RollbackRequest::InitAsDefaultInstance() {
}
class RollbackRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RollbackRequest::kDatabaseFieldNumber;
const int RollbackRequest::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackRequest::RollbackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.RollbackRequest)
}
RollbackRequest::RollbackRequest(const RollbackRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction().size() > 0) {
    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.RollbackRequest)
}

void RollbackRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RollbackRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RollbackRequest::~RollbackRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.RollbackRequest)
  SharedDtor();
}

void RollbackRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RollbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RollbackRequest& RollbackRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RollbackRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void RollbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.RollbackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RollbackRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RollbackRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string database = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.RollbackRequest.database");
        object = msg->mutable_database();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes transaction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transaction();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RollbackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.RollbackRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), static_cast<int>(this->database().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.RollbackRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.RollbackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.RollbackRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RollbackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.RollbackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.RollbackRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // bytes transaction = 2;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->transaction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.RollbackRequest)
}

::google::protobuf::uint8* RollbackRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.RollbackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.RollbackRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // bytes transaction = 2;
  if (this->transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->transaction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.RollbackRequest)
  return target;
}

size_t RollbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.RollbackRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  // bytes transaction = 2;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RollbackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.RollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RollbackRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RollbackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.RollbackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.RollbackRequest)
    MergeFrom(*source);
  }
}

void RollbackRequest::MergeFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.RollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
}

void RollbackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.RollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackRequest::CopyFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.RollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackRequest::IsInitialized() const {
  return true;
}

void RollbackRequest::Swap(RollbackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackRequest::InternalSwap(RollbackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  database_.Swap(&other->database_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_.Swap(&other->transaction_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata RollbackRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RunQueryRequest::InitAsDefaultInstance() {
  ::google::firestore::v1::_RunQueryRequest_default_instance_.structured_query_ = const_cast< ::google::firestore::v1::StructuredQuery*>(
      ::google::firestore::v1::StructuredQuery::internal_default_instance());
  ::google::firestore::v1::_RunQueryRequest_default_instance_.transaction_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::firestore::v1::_RunQueryRequest_default_instance_.new_transaction_ = const_cast< ::google::firestore::v1::TransactionOptions*>(
      ::google::firestore::v1::TransactionOptions::internal_default_instance());
  ::google::firestore::v1::_RunQueryRequest_default_instance_.read_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class RunQueryRequest::HasBitSetters {
 public:
  static const ::google::firestore::v1::StructuredQuery& structured_query(const RunQueryRequest* msg);
  static const ::google::firestore::v1::TransactionOptions& new_transaction(const RunQueryRequest* msg);
  static const ::google::protobuf::Timestamp& read_time(const RunQueryRequest* msg);
};

const ::google::firestore::v1::StructuredQuery&
RunQueryRequest::HasBitSetters::structured_query(const RunQueryRequest* msg) {
  return *msg->query_type_.structured_query_;
}
const ::google::firestore::v1::TransactionOptions&
RunQueryRequest::HasBitSetters::new_transaction(const RunQueryRequest* msg) {
  return *msg->consistency_selector_.new_transaction_;
}
const ::google::protobuf::Timestamp&
RunQueryRequest::HasBitSetters::read_time(const RunQueryRequest* msg) {
  return *msg->consistency_selector_.read_time_;
}
void RunQueryRequest::set_allocated_structured_query(::google::firestore::v1::StructuredQuery* structured_query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_query_type();
  if (structured_query) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      structured_query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, structured_query, submessage_arena);
    }
    set_has_structured_query();
    query_type_.structured_query_ = structured_query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.RunQueryRequest.structured_query)
}
void RunQueryRequest::clear_structured_query() {
  if (has_structured_query()) {
    delete query_type_.structured_query_;
    clear_has_query_type();
  }
}
void RunQueryRequest::set_allocated_new_transaction(::google::firestore::v1::TransactionOptions* new_transaction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_consistency_selector();
  if (new_transaction) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_transaction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_transaction, submessage_arena);
    }
    set_has_new_transaction();
    consistency_selector_.new_transaction_ = new_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.RunQueryRequest.new_transaction)
}
void RunQueryRequest::clear_new_transaction() {
  if (has_new_transaction()) {
    delete consistency_selector_.new_transaction_;
    clear_has_consistency_selector();
  }
}
void RunQueryRequest::set_allocated_read_time(::google::protobuf::Timestamp* read_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_consistency_selector();
  if (read_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    consistency_selector_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.RunQueryRequest.read_time)
}
void RunQueryRequest::clear_read_time() {
  if (has_read_time()) {
    delete consistency_selector_.read_time_;
    clear_has_consistency_selector();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunQueryRequest::kParentFieldNumber;
const int RunQueryRequest::kStructuredQueryFieldNumber;
const int RunQueryRequest::kTransactionFieldNumber;
const int RunQueryRequest::kNewTransactionFieldNumber;
const int RunQueryRequest::kReadTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunQueryRequest::RunQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.RunQueryRequest)
}
RunQueryRequest::RunQueryRequest(const RunQueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  clear_has_query_type();
  switch (from.query_type_case()) {
    case kStructuredQuery: {
      mutable_structured_query()->::google::firestore::v1::StructuredQuery::MergeFrom(from.structured_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_consistency_selector();
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case kNewTransaction: {
      mutable_new_transaction()->::google::firestore::v1::TransactionOptions::MergeFrom(from.new_transaction());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.RunQueryRequest)
}

void RunQueryRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RunQueryRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_type();
  clear_has_consistency_selector();
}

RunQueryRequest::~RunQueryRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.RunQueryRequest)
  SharedDtor();
}

void RunQueryRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_query_type()) {
    clear_query_type();
  }
  if (has_consistency_selector()) {
    clear_consistency_selector();
  }
}

void RunQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunQueryRequest& RunQueryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RunQueryRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void RunQueryRequest::clear_query_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.RunQueryRequest)
  switch (query_type_case()) {
    case kStructuredQuery: {
      delete query_type_.structured_query_;
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}

void RunQueryRequest::clear_consistency_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.RunQueryRequest)
  switch (consistency_selector_case()) {
    case kTransaction: {
      consistency_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kNewTransaction: {
      delete consistency_selector_.new_transaction_;
      break;
    }
    case kReadTime: {
      delete consistency_selector_.read_time_;
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = CONSISTENCY_SELECTOR_NOT_SET;
}


void RunQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.RunQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_query_type();
  clear_consistency_selector();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunQueryRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RunQueryRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.RunQueryRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.StructuredQuery structured_query = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::StructuredQuery::_InternalParse;
        object = msg->mutable_structured_query();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes transaction = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transaction();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.TransactionOptions new_transaction = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::TransactionOptions::_InternalParse;
        object = msg->mutable_new_transaction();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp read_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_read_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.RunQueryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.RunQueryRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.StructuredQuery structured_query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_structured_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.TransactionOptions new_transaction = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp read_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.RunQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.RunQueryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.RunQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.RunQueryRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.firestore.v1.StructuredQuery structured_query = 2;
  if (has_structured_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::structured_query(this), output);
  }

  // bytes transaction = 5;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->transaction(), output);
  }

  // .google.firestore.v1.TransactionOptions new_transaction = 6;
  if (has_new_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::new_transaction(this), output);
  }

  // .google.protobuf.Timestamp read_time = 7;
  if (has_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::read_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.RunQueryRequest)
}

::google::protobuf::uint8* RunQueryRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.RunQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.RunQueryRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.firestore.v1.StructuredQuery structured_query = 2;
  if (has_structured_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::structured_query(this), target);
  }

  // bytes transaction = 5;
  if (has_transaction()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->transaction(), target);
  }

  // .google.firestore.v1.TransactionOptions new_transaction = 6;
  if (has_new_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::new_transaction(this), target);
  }

  // .google.protobuf.Timestamp read_time = 7;
  if (has_read_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::read_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.RunQueryRequest)
  return target;
}

size_t RunQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.RunQueryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  switch (query_type_case()) {
    // .google.firestore.v1.StructuredQuery structured_query = 2;
    case kStructuredQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *query_type_.structured_query_);
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  switch (consistency_selector_case()) {
    // bytes transaction = 5;
    case kTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction());
      break;
    }
    // .google.firestore.v1.TransactionOptions new_transaction = 6;
    case kNewTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *consistency_selector_.new_transaction_);
      break;
    }
    // .google.protobuf.Timestamp read_time = 7;
    case kReadTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *consistency_selector_.read_time_);
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.RunQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunQueryRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RunQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.RunQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.RunQueryRequest)
    MergeFrom(*source);
  }
}

void RunQueryRequest::MergeFrom(const RunQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.RunQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  switch (from.query_type_case()) {
    case kStructuredQuery: {
      mutable_structured_query()->::google::firestore::v1::StructuredQuery::MergeFrom(from.structured_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case kNewTransaction: {
      mutable_new_transaction()->::google::firestore::v1::TransactionOptions::MergeFrom(from.new_transaction());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
}

void RunQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.RunQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunQueryRequest::CopyFrom(const RunQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.RunQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunQueryRequest::IsInitialized() const {
  return true;
}

void RunQueryRequest::Swap(RunQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunQueryRequest::InternalSwap(RunQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_type_, other->query_type_);
  swap(consistency_selector_, other->consistency_selector_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::google::protobuf::Metadata RunQueryRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RunQueryResponse::InitAsDefaultInstance() {
  ::google::firestore::v1::_RunQueryResponse_default_instance_._instance.get_mutable()->document_ = const_cast< ::google::firestore::v1::Document*>(
      ::google::firestore::v1::Document::internal_default_instance());
  ::google::firestore::v1::_RunQueryResponse_default_instance_._instance.get_mutable()->read_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class RunQueryResponse::HasBitSetters {
 public:
  static const ::google::firestore::v1::Document& document(const RunQueryResponse* msg);
  static const ::google::protobuf::Timestamp& read_time(const RunQueryResponse* msg);
};

const ::google::firestore::v1::Document&
RunQueryResponse::HasBitSetters::document(const RunQueryResponse* msg) {
  return *msg->document_;
}
const ::google::protobuf::Timestamp&
RunQueryResponse::HasBitSetters::read_time(const RunQueryResponse* msg) {
  return *msg->read_time_;
}
void RunQueryResponse::clear_document() {
  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
void RunQueryResponse::clear_read_time() {
  if (GetArenaNoVirtual() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunQueryResponse::kTransactionFieldNumber;
const int RunQueryResponse::kDocumentFieldNumber;
const int RunQueryResponse::kReadTimeFieldNumber;
const int RunQueryResponse::kSkippedResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunQueryResponse::RunQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.RunQueryResponse)
}
RunQueryResponse::RunQueryResponse(const RunQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction().size() > 0) {
    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  if (from.has_document()) {
    document_ = new ::google::firestore::v1::Document(*from.document_);
  } else {
    document_ = nullptr;
  }
  if (from.has_read_time()) {
    read_time_ = new ::google::protobuf::Timestamp(*from.read_time_);
  } else {
    read_time_ = nullptr;
  }
  skipped_results_ = from.skipped_results_;
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.RunQueryResponse)
}

void RunQueryResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RunQueryResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&document_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skipped_results_) -
      reinterpret_cast<char*>(&document_)) + sizeof(skipped_results_));
}

RunQueryResponse::~RunQueryResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.RunQueryResponse)
  SharedDtor();
}

void RunQueryResponse::SharedDtor() {
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
  if (this != internal_default_instance()) delete read_time_;
}

void RunQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunQueryResponse& RunQueryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RunQueryResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void RunQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.RunQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
  skipped_results_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunQueryResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RunQueryResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.firestore.v1.Document document = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::Document::_InternalParse;
        object = msg->mutable_document();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes transaction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transaction();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp read_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_read_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 skipped_results = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_skipped_results(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.RunQueryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.firestore.v1.Document document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp read_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 skipped_results = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skipped_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.RunQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.RunQueryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.RunQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::document(this), output);
  }

  // bytes transaction = 2;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->transaction(), output);
  }

  // .google.protobuf.Timestamp read_time = 3;
  if (this->has_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::read_time(this), output);
  }

  // int32 skipped_results = 4;
  if (this->skipped_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skipped_results(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.RunQueryResponse)
}

::google::protobuf::uint8* RunQueryResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.RunQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::document(this), target);
  }

  // bytes transaction = 2;
  if (this->transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->transaction(), target);
  }

  // .google.protobuf.Timestamp read_time = 3;
  if (this->has_read_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::read_time(this), target);
  }

  // int32 skipped_results = 4;
  if (this->skipped_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skipped_results(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.RunQueryResponse)
  return target;
}

size_t RunQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.RunQueryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction = 2;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction());
  }

  // .google.firestore.v1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // .google.protobuf.Timestamp read_time = 3;
  if (this->has_read_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *read_time_);
  }

  // int32 skipped_results = 4;
  if (this->skipped_results() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skipped_results());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.RunQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunQueryResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RunQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.RunQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.RunQueryResponse)
    MergeFrom(*source);
  }
}

void RunQueryResponse::MergeFrom(const RunQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.RunQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  if (from.has_document()) {
    mutable_document()->::google::firestore::v1::Document::MergeFrom(from.document());
  }
  if (from.has_read_time()) {
    mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
  }
  if (from.skipped_results() != 0) {
    set_skipped_results(from.skipped_results());
  }
}

void RunQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.RunQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunQueryResponse::CopyFrom(const RunQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.RunQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunQueryResponse::IsInitialized() const {
  return true;
}

void RunQueryResponse::Swap(RunQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunQueryResponse::InternalSwap(RunQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transaction_.Swap(&other->transaction_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(document_, other->document_);
  swap(read_time_, other->read_time_);
  swap(skipped_results_, other->skipped_results_);
}

::google::protobuf::Metadata RunQueryResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

WriteRequest_LabelsEntry_DoNotUse::WriteRequest_LabelsEntry_DoNotUse() {}
WriteRequest_LabelsEntry_DoNotUse::WriteRequest_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void WriteRequest_LabelsEntry_DoNotUse::MergeFrom(const WriteRequest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata WriteRequest_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[15];
}
void WriteRequest_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WriteRequest_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      WriteRequest_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.firestore.v1.WriteRequest.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.firestore.v1.WriteRequest.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void WriteRequest::InitAsDefaultInstance() {
}
class WriteRequest::HasBitSetters {
 public:
};

void WriteRequest::clear_writes() {
  writes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteRequest::kDatabaseFieldNumber;
const int WriteRequest::kStreamIdFieldNumber;
const int WriteRequest::kWritesFieldNumber;
const int WriteRequest::kStreamTokenFieldNumber;
const int WriteRequest::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteRequest::WriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.WriteRequest)
}
WriteRequest::WriteRequest(const WriteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      writes_(from.writes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id_);
  }
  stream_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_token().size() > 0) {
    stream_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.WriteRequest)
}

void WriteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WriteRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.WriteRequest)
  SharedDtor();
}

void WriteRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteRequest& WriteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WriteRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.WriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  writes_.Clear();
  labels_.Clear();
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WriteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WriteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string database = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.WriteRequest.database");
        object = msg->mutable_database();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string stream_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.WriteRequest.stream_id");
        object = msg->mutable_stream_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.firestore.v1.Write writes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::firestore::v1::Write::_InternalParse;
          object = msg->add_writes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // bytes stream_token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_stream_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> labels = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.WriteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), static_cast<int>(this->database().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.WriteRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), static_cast<int>(this->stream_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.WriteRequest.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.firestore.v1.Write writes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes stream_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stream_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          WriteRequest_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              WriteRequest_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.WriteRequest.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.WriteRequest.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.WriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.WriteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.WriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.WriteRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), static_cast<int>(this->stream_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.WriteRequest.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_id(), output);
  }

  // repeated .google.firestore.v1.Write writes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->writes(static_cast<int>(i)),
      output);
  }

  // bytes stream_token = 4;
  if (this->stream_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->stream_token(), output);
  }

  // map<string, string> labels = 5;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.WriteRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.WriteRequest.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WriteRequest_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WriteRequest_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.WriteRequest)
}

::google::protobuf::uint8* WriteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.WriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.WriteRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), static_cast<int>(this->stream_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.WriteRequest.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_id(), target);
  }

  // repeated .google.firestore.v1.Write writes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->writes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->writes(static_cast<int>(i)), target);
  }

  // bytes stream_token = 4;
  if (this->stream_token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stream_token(), target);
  }

  // map<string, string> labels = 5;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.WriteRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.WriteRequest.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WriteRequest_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WriteRequest_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.WriteRequest)
  return target;
}

size_t WriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.WriteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.Write writes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->writes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->writes(static_cast<int>(i)));
    }
  }

  // map<string, string> labels = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<WriteRequest_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // bytes stream_token = 4;
  if (this->stream_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stream_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.WriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.WriteRequest)
    MergeFrom(*source);
  }
}

void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  writes_.MergeFrom(from.writes_);
  labels_.MergeFrom(from.labels_);
  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  if (from.stream_id().size() > 0) {

    stream_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id_);
  }
  if (from.stream_token().size() > 0) {

    stream_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_token_);
  }
}

void WriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  return true;
}

void WriteRequest::Swap(WriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteRequest::InternalSwap(WriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&writes_)->InternalSwap(CastToBase(&other->writes_));
  labels_.Swap(&other->labels_);
  database_.Swap(&other->database_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stream_id_.Swap(&other->stream_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stream_token_.Swap(&other->stream_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata WriteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WriteResponse::InitAsDefaultInstance() {
  ::google::firestore::v1::_WriteResponse_default_instance_._instance.get_mutable()->commit_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class WriteResponse::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& commit_time(const WriteResponse* msg);
};

const ::google::protobuf::Timestamp&
WriteResponse::HasBitSetters::commit_time(const WriteResponse* msg) {
  return *msg->commit_time_;
}
void WriteResponse::clear_write_results() {
  write_results_.Clear();
}
void WriteResponse::clear_commit_time() {
  if (GetArenaNoVirtual() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteResponse::kStreamIdFieldNumber;
const int WriteResponse::kStreamTokenFieldNumber;
const int WriteResponse::kWriteResultsFieldNumber;
const int WriteResponse::kCommitTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteResponse::WriteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.WriteResponse)
}
WriteResponse::WriteResponse(const WriteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      write_results_(from.write_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id_);
  }
  stream_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_token().size() > 0) {
    stream_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_token_);
  }
  if (from.has_commit_time()) {
    commit_time_ = new ::google::protobuf::Timestamp(*from.commit_time_);
  } else {
    commit_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.WriteResponse)
}

void WriteResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WriteResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commit_time_ = nullptr;
}

WriteResponse::~WriteResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.WriteResponse)
  SharedDtor();
}

void WriteResponse::SharedDtor() {
  stream_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commit_time_;
}

void WriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteResponse& WriteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WriteResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void WriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.WriteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_results_.Clear();
  stream_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WriteResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WriteResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string stream_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.WriteResponse.stream_id");
        object = msg->mutable_stream_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes stream_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_stream_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.firestore.v1.WriteResult write_results = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::firestore::v1::WriteResult::_InternalParse;
          object = msg->add_write_results();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .google.protobuf.Timestamp commit_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_commit_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.WriteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), static_cast<int>(this->stream_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.WriteResponse.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes stream_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stream_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.firestore.v1.WriteResult write_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_write_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp commit_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.WriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.WriteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.WriteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), static_cast<int>(this->stream_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.WriteResponse.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // bytes stream_token = 2;
  if (this->stream_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->stream_token(), output);
  }

  // repeated .google.firestore.v1.WriteResult write_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->write_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->write_results(static_cast<int>(i)),
      output);
  }

  // .google.protobuf.Timestamp commit_time = 4;
  if (this->has_commit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::commit_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.WriteResponse)
}

::google::protobuf::uint8* WriteResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.WriteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), static_cast<int>(this->stream_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.WriteResponse.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // bytes stream_token = 2;
  if (this->stream_token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stream_token(), target);
  }

  // repeated .google.firestore.v1.WriteResult write_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->write_results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->write_results(static_cast<int>(i)), target);
  }

  // .google.protobuf.Timestamp commit_time = 4;
  if (this->has_commit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::commit_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.WriteResponse)
  return target;
}

size_t WriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.WriteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.WriteResult write_results = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->write_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->write_results(static_cast<int>(i)));
    }
  }

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // bytes stream_token = 2;
  if (this->stream_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stream_token());
  }

  // .google.protobuf.Timestamp commit_time = 4;
  if (this->has_commit_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *commit_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.WriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteResponse* source =
      ::google::protobuf::DynamicCastToGenerated<WriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.WriteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.WriteResponse)
    MergeFrom(*source);
  }
}

void WriteResponse::MergeFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.WriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_results_.MergeFrom(from.write_results_);
  if (from.stream_id().size() > 0) {

    stream_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id_);
  }
  if (from.stream_token().size() > 0) {

    stream_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_token_);
  }
  if (from.has_commit_time()) {
    mutable_commit_time()->::google::protobuf::Timestamp::MergeFrom(from.commit_time());
  }
}

void WriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.WriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteResponse::CopyFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.WriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteResponse::IsInitialized() const {
  return true;
}

void WriteResponse::Swap(WriteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteResponse::InternalSwap(WriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&write_results_)->InternalSwap(CastToBase(&other->write_results_));
  stream_id_.Swap(&other->stream_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stream_token_.Swap(&other->stream_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(commit_time_, other->commit_time_);
}

::google::protobuf::Metadata WriteResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

ListenRequest_LabelsEntry_DoNotUse::ListenRequest_LabelsEntry_DoNotUse() {}
ListenRequest_LabelsEntry_DoNotUse::ListenRequest_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void ListenRequest_LabelsEntry_DoNotUse::MergeFrom(const ListenRequest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ListenRequest_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[18];
}
void ListenRequest_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListenRequest_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      ListenRequest_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.firestore.v1.ListenRequest.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.firestore.v1.ListenRequest.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void ListenRequest::InitAsDefaultInstance() {
  ::google::firestore::v1::_ListenRequest_default_instance_.add_target_ = const_cast< ::google::firestore::v1::Target*>(
      ::google::firestore::v1::Target::internal_default_instance());
  ::google::firestore::v1::_ListenRequest_default_instance_.remove_target_ = 0;
}
class ListenRequest::HasBitSetters {
 public:
  static const ::google::firestore::v1::Target& add_target(const ListenRequest* msg);
};

const ::google::firestore::v1::Target&
ListenRequest::HasBitSetters::add_target(const ListenRequest* msg) {
  return *msg->target_change_.add_target_;
}
void ListenRequest::set_allocated_add_target(::google::firestore::v1::Target* add_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target_change();
  if (add_target) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      add_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_target, submessage_arena);
    }
    set_has_add_target();
    target_change_.add_target_ = add_target;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenRequest.add_target)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListenRequest::kDatabaseFieldNumber;
const int ListenRequest::kAddTargetFieldNumber;
const int ListenRequest::kRemoveTargetFieldNumber;
const int ListenRequest::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListenRequest::ListenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.ListenRequest)
}
ListenRequest::ListenRequest(const ListenRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  clear_has_target_change();
  switch (from.target_change_case()) {
    case kAddTarget: {
      mutable_add_target()->::google::firestore::v1::Target::MergeFrom(from.add_target());
      break;
    }
    case kRemoveTarget: {
      set_remove_target(from.remove_target());
      break;
    }
    case TARGET_CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListenRequest)
}

void ListenRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListenRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_change();
}

ListenRequest::~ListenRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListenRequest)
  SharedDtor();
}

void ListenRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_target_change()) {
    clear_target_change();
  }
}

void ListenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListenRequest& ListenRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListenRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void ListenRequest::clear_target_change() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.ListenRequest)
  switch (target_change_case()) {
    case kAddTarget: {
      delete target_change_.add_target_;
      break;
    }
    case kRemoveTarget: {
      // No need to clear
      break;
    }
    case TARGET_CHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_CHANGE_NOT_SET;
}


void ListenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_target_change();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListenRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListenRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string database = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListenRequest.database");
        object = msg->mutable_database();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.Target add_target = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::Target::_InternalParse;
        object = msg->mutable_add_target();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 remove_target = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_remove_target(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, string> labels = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.ListenRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), static_cast<int>(this->database().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListenRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.Target add_target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remove_target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          clear_target_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_change_.remove_target_)));
          set_has_remove_target();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          ListenRequest_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ListenRequest_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListenRequest.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListenRequest.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.ListenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.ListenRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.ListenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListenRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // .google.firestore.v1.Target add_target = 2;
  if (has_add_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::add_target(this), output);
  }

  // int32 remove_target = 3;
  if (has_remove_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remove_target(), output);
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.ListenRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.ListenRequest.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ListenRequest_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ListenRequest_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.ListenRequest)
}

::google::protobuf::uint8* ListenRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListenRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // .google.firestore.v1.Target add_target = 2;
  if (has_add_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::add_target(this), target);
  }

  // int32 remove_target = 3;
  if (has_remove_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remove_target(), target);
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.ListenRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.ListenRequest.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ListenRequest_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ListenRequest_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListenRequest)
  return target;
}

size_t ListenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListenRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<ListenRequest_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  switch (target_change_case()) {
    // .google.firestore.v1.Target add_target = 2;
    case kAddTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_change_.add_target_);
      break;
    }
    // int32 remove_target = 3;
    case kRemoveTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remove_target());
      break;
    }
    case TARGET_CHANGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.ListenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListenRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.ListenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.ListenRequest)
    MergeFrom(*source);
  }
}

void ListenRequest::MergeFrom(const ListenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  switch (from.target_change_case()) {
    case kAddTarget: {
      mutable_add_target()->::google::firestore::v1::Target::MergeFrom(from.add_target());
      break;
    }
    case kRemoveTarget: {
      set_remove_target(from.remove_target());
      break;
    }
    case TARGET_CHANGE_NOT_SET: {
      break;
    }
  }
}

void ListenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.ListenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenRequest::CopyFrom(const ListenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenRequest::IsInitialized() const {
  return true;
}

void ListenRequest::Swap(ListenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListenRequest::InternalSwap(ListenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  database_.Swap(&other->database_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_change_, other->target_change_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ListenRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListenResponse::InitAsDefaultInstance() {
  ::google::firestore::v1::_ListenResponse_default_instance_.target_change_ = const_cast< ::google::firestore::v1::TargetChange*>(
      ::google::firestore::v1::TargetChange::internal_default_instance());
  ::google::firestore::v1::_ListenResponse_default_instance_.document_change_ = const_cast< ::google::firestore::v1::DocumentChange*>(
      ::google::firestore::v1::DocumentChange::internal_default_instance());
  ::google::firestore::v1::_ListenResponse_default_instance_.document_delete_ = const_cast< ::google::firestore::v1::DocumentDelete*>(
      ::google::firestore::v1::DocumentDelete::internal_default_instance());
  ::google::firestore::v1::_ListenResponse_default_instance_.document_remove_ = const_cast< ::google::firestore::v1::DocumentRemove*>(
      ::google::firestore::v1::DocumentRemove::internal_default_instance());
  ::google::firestore::v1::_ListenResponse_default_instance_.filter_ = const_cast< ::google::firestore::v1::ExistenceFilter*>(
      ::google::firestore::v1::ExistenceFilter::internal_default_instance());
}
class ListenResponse::HasBitSetters {
 public:
  static const ::google::firestore::v1::TargetChange& target_change(const ListenResponse* msg);
  static const ::google::firestore::v1::DocumentChange& document_change(const ListenResponse* msg);
  static const ::google::firestore::v1::DocumentDelete& document_delete(const ListenResponse* msg);
  static const ::google::firestore::v1::DocumentRemove& document_remove(const ListenResponse* msg);
  static const ::google::firestore::v1::ExistenceFilter& filter(const ListenResponse* msg);
};

const ::google::firestore::v1::TargetChange&
ListenResponse::HasBitSetters::target_change(const ListenResponse* msg) {
  return *msg->response_type_.target_change_;
}
const ::google::firestore::v1::DocumentChange&
ListenResponse::HasBitSetters::document_change(const ListenResponse* msg) {
  return *msg->response_type_.document_change_;
}
const ::google::firestore::v1::DocumentDelete&
ListenResponse::HasBitSetters::document_delete(const ListenResponse* msg) {
  return *msg->response_type_.document_delete_;
}
const ::google::firestore::v1::DocumentRemove&
ListenResponse::HasBitSetters::document_remove(const ListenResponse* msg) {
  return *msg->response_type_.document_remove_;
}
const ::google::firestore::v1::ExistenceFilter&
ListenResponse::HasBitSetters::filter(const ListenResponse* msg) {
  return *msg->response_type_.filter_;
}
void ListenResponse::set_allocated_target_change(::google::firestore::v1::TargetChange* target_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response_type();
  if (target_change) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_change, submessage_arena);
    }
    set_has_target_change();
    response_type_.target_change_ = target_change;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.target_change)
}
void ListenResponse::set_allocated_document_change(::google::firestore::v1::DocumentChange* document_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response_type();
  if (document_change) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      document_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, document_change, submessage_arena);
    }
    set_has_document_change();
    response_type_.document_change_ = document_change;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.document_change)
}
void ListenResponse::clear_document_change() {
  if (has_document_change()) {
    delete response_type_.document_change_;
    clear_has_response_type();
  }
}
void ListenResponse::set_allocated_document_delete(::google::firestore::v1::DocumentDelete* document_delete) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response_type();
  if (document_delete) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      document_delete = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, document_delete, submessage_arena);
    }
    set_has_document_delete();
    response_type_.document_delete_ = document_delete;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.document_delete)
}
void ListenResponse::clear_document_delete() {
  if (has_document_delete()) {
    delete response_type_.document_delete_;
    clear_has_response_type();
  }
}
void ListenResponse::set_allocated_document_remove(::google::firestore::v1::DocumentRemove* document_remove) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response_type();
  if (document_remove) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      document_remove = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, document_remove, submessage_arena);
    }
    set_has_document_remove();
    response_type_.document_remove_ = document_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.document_remove)
}
void ListenResponse::clear_document_remove() {
  if (has_document_remove()) {
    delete response_type_.document_remove_;
    clear_has_response_type();
  }
}
void ListenResponse::set_allocated_filter(::google::firestore::v1::ExistenceFilter* filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response_type();
  if (filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    response_type_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.filter)
}
void ListenResponse::clear_filter() {
  if (has_filter()) {
    delete response_type_.filter_;
    clear_has_response_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListenResponse::kTargetChangeFieldNumber;
const int ListenResponse::kDocumentChangeFieldNumber;
const int ListenResponse::kDocumentDeleteFieldNumber;
const int ListenResponse::kDocumentRemoveFieldNumber;
const int ListenResponse::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListenResponse::ListenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.ListenResponse)
}
ListenResponse::ListenResponse(const ListenResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_response_type();
  switch (from.response_type_case()) {
    case kTargetChange: {
      mutable_target_change()->::google::firestore::v1::TargetChange::MergeFrom(from.target_change());
      break;
    }
    case kDocumentChange: {
      mutable_document_change()->::google::firestore::v1::DocumentChange::MergeFrom(from.document_change());
      break;
    }
    case kDocumentDelete: {
      mutable_document_delete()->::google::firestore::v1::DocumentDelete::MergeFrom(from.document_delete());
      break;
    }
    case kDocumentRemove: {
      mutable_document_remove()->::google::firestore::v1::DocumentRemove::MergeFrom(from.document_remove());
      break;
    }
    case kFilter: {
      mutable_filter()->::google::firestore::v1::ExistenceFilter::MergeFrom(from.filter());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListenResponse)
}

void ListenResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListenResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  clear_has_response_type();
}

ListenResponse::~ListenResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListenResponse)
  SharedDtor();
}

void ListenResponse::SharedDtor() {
  if (has_response_type()) {
    clear_response_type();
  }
}

void ListenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListenResponse& ListenResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListenResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void ListenResponse::clear_response_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.ListenResponse)
  switch (response_type_case()) {
    case kTargetChange: {
      delete response_type_.target_change_;
      break;
    }
    case kDocumentChange: {
      delete response_type_.document_change_;
      break;
    }
    case kDocumentDelete: {
      delete response_type_.document_delete_;
      break;
    }
    case kDocumentRemove: {
      delete response_type_.document_remove_;
      break;
    }
    case kFilter: {
      delete response_type_.filter_;
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}


void ListenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListenResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListenResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.firestore.v1.TargetChange target_change = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::TargetChange::_InternalParse;
        object = msg->mutable_target_change();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.firestore.v1.DocumentChange document_change = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::DocumentChange::_InternalParse;
        object = msg->mutable_document_change();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.firestore.v1.DocumentDelete document_delete = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::DocumentDelete::_InternalParse;
        object = msg->mutable_document_delete();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.firestore.v1.ExistenceFilter filter = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::ExistenceFilter::_InternalParse;
        object = msg->mutable_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.firestore.v1.DocumentRemove document_remove = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::DocumentRemove::_InternalParse;
        object = msg->mutable_document_remove();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.ListenResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.firestore.v1.TargetChange target_change = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.DocumentChange document_change = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_document_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.DocumentDelete document_delete = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_document_delete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.ExistenceFilter filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.DocumentRemove document_remove = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_document_remove()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.ListenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.ListenResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.ListenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.TargetChange target_change = 2;
  if (has_target_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::target_change(this), output);
  }

  // .google.firestore.v1.DocumentChange document_change = 3;
  if (has_document_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::document_change(this), output);
  }

  // .google.firestore.v1.DocumentDelete document_delete = 4;
  if (has_document_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::document_delete(this), output);
  }

  // .google.firestore.v1.ExistenceFilter filter = 5;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::filter(this), output);
  }

  // .google.firestore.v1.DocumentRemove document_remove = 6;
  if (has_document_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::document_remove(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.ListenResponse)
}

::google::protobuf::uint8* ListenResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.TargetChange target_change = 2;
  if (has_target_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::target_change(this), target);
  }

  // .google.firestore.v1.DocumentChange document_change = 3;
  if (has_document_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::document_change(this), target);
  }

  // .google.firestore.v1.DocumentDelete document_delete = 4;
  if (has_document_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::document_delete(this), target);
  }

  // .google.firestore.v1.ExistenceFilter filter = 5;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::filter(this), target);
  }

  // .google.firestore.v1.DocumentRemove document_remove = 6;
  if (has_document_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::document_remove(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListenResponse)
  return target;
}

size_t ListenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListenResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_type_case()) {
    // .google.firestore.v1.TargetChange target_change = 2;
    case kTargetChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_type_.target_change_);
      break;
    }
    // .google.firestore.v1.DocumentChange document_change = 3;
    case kDocumentChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_type_.document_change_);
      break;
    }
    // .google.firestore.v1.DocumentDelete document_delete = 4;
    case kDocumentDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_type_.document_delete_);
      break;
    }
    // .google.firestore.v1.DocumentRemove document_remove = 6;
    case kDocumentRemove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_type_.document_remove_);
      break;
    }
    // .google.firestore.v1.ExistenceFilter filter = 5;
    case kFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_type_.filter_);
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.ListenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListenResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.ListenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.ListenResponse)
    MergeFrom(*source);
  }
}

void ListenResponse::MergeFrom(const ListenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_type_case()) {
    case kTargetChange: {
      mutable_target_change()->::google::firestore::v1::TargetChange::MergeFrom(from.target_change());
      break;
    }
    case kDocumentChange: {
      mutable_document_change()->::google::firestore::v1::DocumentChange::MergeFrom(from.document_change());
      break;
    }
    case kDocumentDelete: {
      mutable_document_delete()->::google::firestore::v1::DocumentDelete::MergeFrom(from.document_delete());
      break;
    }
    case kDocumentRemove: {
      mutable_document_remove()->::google::firestore::v1::DocumentRemove::MergeFrom(from.document_remove());
      break;
    }
    case kFilter: {
      mutable_filter()->::google::firestore::v1::ExistenceFilter::MergeFrom(from.filter());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
}

void ListenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.ListenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenResponse::CopyFrom(const ListenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenResponse::IsInitialized() const {
  return true;
}

void ListenResponse::Swap(ListenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListenResponse::InternalSwap(ListenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_type_, other->response_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ListenResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Target_DocumentsTarget::InitAsDefaultInstance() {
}
class Target_DocumentsTarget::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Target_DocumentsTarget::kDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Target_DocumentsTarget::Target_DocumentsTarget()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.Target.DocumentsTarget)
}
Target_DocumentsTarget::Target_DocumentsTarget(const Target_DocumentsTarget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.Target.DocumentsTarget)
}

void Target_DocumentsTarget::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Target_DocumentsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
}

Target_DocumentsTarget::~Target_DocumentsTarget() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.Target.DocumentsTarget)
  SharedDtor();
}

void Target_DocumentsTarget::SharedDtor() {
}

void Target_DocumentsTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Target_DocumentsTarget& Target_DocumentsTarget::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Target_DocumentsTarget_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void Target_DocumentsTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.Target.DocumentsTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Target_DocumentsTarget::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Target_DocumentsTarget*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string documents = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.firestore.v1.Target.DocumentsTarget.documents");
          object = msg->add_documents();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Target_DocumentsTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.Target.DocumentsTarget)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string documents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_documents()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->documents(this->documents_size() - 1).data(),
            static_cast<int>(this->documents(this->documents_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.Target.DocumentsTarget.documents"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.Target.DocumentsTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.Target.DocumentsTarget)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Target_DocumentsTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.Target.DocumentsTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->documents(i).data(), static_cast<int>(this->documents(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.Target.DocumentsTarget.documents");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->documents(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.Target.DocumentsTarget)
}

::google::protobuf::uint8* Target_DocumentsTarget::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.Target.DocumentsTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string documents = 2;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->documents(i).data(), static_cast<int>(this->documents(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.Target.DocumentsTarget.documents");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->documents(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.Target.DocumentsTarget)
  return target;
}

size_t Target_DocumentsTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.Target.DocumentsTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string documents = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->documents_size());
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->documents(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Target_DocumentsTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.Target.DocumentsTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const Target_DocumentsTarget* source =
      ::google::protobuf::DynamicCastToGenerated<Target_DocumentsTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.Target.DocumentsTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.Target.DocumentsTarget)
    MergeFrom(*source);
  }
}

void Target_DocumentsTarget::MergeFrom(const Target_DocumentsTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.Target.DocumentsTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
}

void Target_DocumentsTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.Target.DocumentsTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Target_DocumentsTarget::CopyFrom(const Target_DocumentsTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.Target.DocumentsTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target_DocumentsTarget::IsInitialized() const {
  return true;
}

void Target_DocumentsTarget::Swap(Target_DocumentsTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Target_DocumentsTarget::InternalSwap(Target_DocumentsTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  documents_.InternalSwap(CastToBase(&other->documents_));
}

::google::protobuf::Metadata Target_DocumentsTarget::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Target_QueryTarget::InitAsDefaultInstance() {
  ::google::firestore::v1::_Target_QueryTarget_default_instance_.structured_query_ = const_cast< ::google::firestore::v1::StructuredQuery*>(
      ::google::firestore::v1::StructuredQuery::internal_default_instance());
}
class Target_QueryTarget::HasBitSetters {
 public:
  static const ::google::firestore::v1::StructuredQuery& structured_query(const Target_QueryTarget* msg);
};

const ::google::firestore::v1::StructuredQuery&
Target_QueryTarget::HasBitSetters::structured_query(const Target_QueryTarget* msg) {
  return *msg->query_type_.structured_query_;
}
void Target_QueryTarget::set_allocated_structured_query(::google::firestore::v1::StructuredQuery* structured_query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_query_type();
  if (structured_query) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      structured_query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, structured_query, submessage_arena);
    }
    set_has_structured_query();
    query_type_.structured_query_ = structured_query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Target.QueryTarget.structured_query)
}
void Target_QueryTarget::clear_structured_query() {
  if (has_structured_query()) {
    delete query_type_.structured_query_;
    clear_has_query_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Target_QueryTarget::kParentFieldNumber;
const int Target_QueryTarget::kStructuredQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Target_QueryTarget::Target_QueryTarget()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.Target.QueryTarget)
}
Target_QueryTarget::Target_QueryTarget(const Target_QueryTarget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  clear_has_query_type();
  switch (from.query_type_case()) {
    case kStructuredQuery: {
      mutable_structured_query()->::google::firestore::v1::StructuredQuery::MergeFrom(from.structured_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.Target.QueryTarget)
}

void Target_QueryTarget::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Target_QueryTarget_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_type();
}

Target_QueryTarget::~Target_QueryTarget() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.Target.QueryTarget)
  SharedDtor();
}

void Target_QueryTarget::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_query_type()) {
    clear_query_type();
  }
}

void Target_QueryTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Target_QueryTarget& Target_QueryTarget::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Target_QueryTarget_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void Target_QueryTarget::clear_query_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.Target.QueryTarget)
  switch (query_type_case()) {
    case kStructuredQuery: {
      delete query_type_.structured_query_;
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}


void Target_QueryTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.Target.QueryTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_query_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Target_QueryTarget::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Target_QueryTarget*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.Target.QueryTarget.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.firestore.v1.StructuredQuery structured_query = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::StructuredQuery::_InternalParse;
        object = msg->mutable_structured_query();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Target_QueryTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.Target.QueryTarget)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.Target.QueryTarget.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.StructuredQuery structured_query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_structured_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.Target.QueryTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.Target.QueryTarget)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Target_QueryTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.Target.QueryTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.Target.QueryTarget.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.firestore.v1.StructuredQuery structured_query = 2;
  if (has_structured_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::structured_query(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.Target.QueryTarget)
}

::google::protobuf::uint8* Target_QueryTarget::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.Target.QueryTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.Target.QueryTarget.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.firestore.v1.StructuredQuery structured_query = 2;
  if (has_structured_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::structured_query(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.Target.QueryTarget)
  return target;
}

size_t Target_QueryTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.Target.QueryTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  switch (query_type_case()) {
    // .google.firestore.v1.StructuredQuery structured_query = 2;
    case kStructuredQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *query_type_.structured_query_);
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Target_QueryTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.Target.QueryTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const Target_QueryTarget* source =
      ::google::protobuf::DynamicCastToGenerated<Target_QueryTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.Target.QueryTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.Target.QueryTarget)
    MergeFrom(*source);
  }
}

void Target_QueryTarget::MergeFrom(const Target_QueryTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.Target.QueryTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  switch (from.query_type_case()) {
    case kStructuredQuery: {
      mutable_structured_query()->::google::firestore::v1::StructuredQuery::MergeFrom(from.structured_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
}

void Target_QueryTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.Target.QueryTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Target_QueryTarget::CopyFrom(const Target_QueryTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.Target.QueryTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target_QueryTarget::IsInitialized() const {
  return true;
}

void Target_QueryTarget::Swap(Target_QueryTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Target_QueryTarget::InternalSwap(Target_QueryTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_type_, other->query_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Target_QueryTarget::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Target::InitAsDefaultInstance() {
  ::google::firestore::v1::_Target_default_instance_.query_ = const_cast< ::google::firestore::v1::Target_QueryTarget*>(
      ::google::firestore::v1::Target_QueryTarget::internal_default_instance());
  ::google::firestore::v1::_Target_default_instance_.documents_ = const_cast< ::google::firestore::v1::Target_DocumentsTarget*>(
      ::google::firestore::v1::Target_DocumentsTarget::internal_default_instance());
  ::google::firestore::v1::_Target_default_instance_.resume_token_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::firestore::v1::_Target_default_instance_.read_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class Target::HasBitSetters {
 public:
  static const ::google::firestore::v1::Target_QueryTarget& query(const Target* msg);
  static const ::google::firestore::v1::Target_DocumentsTarget& documents(const Target* msg);
  static const ::google::protobuf::Timestamp& read_time(const Target* msg);
};

const ::google::firestore::v1::Target_QueryTarget&
Target::HasBitSetters::query(const Target* msg) {
  return *msg->target_type_.query_;
}
const ::google::firestore::v1::Target_DocumentsTarget&
Target::HasBitSetters::documents(const Target* msg) {
  return *msg->target_type_.documents_;
}
const ::google::protobuf::Timestamp&
Target::HasBitSetters::read_time(const Target* msg) {
  return *msg->resume_type_.read_time_;
}
void Target::set_allocated_query(::google::firestore::v1::Target_QueryTarget* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target_type();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    target_type_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Target.query)
}
void Target::set_allocated_documents(::google::firestore::v1::Target_DocumentsTarget* documents) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target_type();
  if (documents) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      documents = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, documents, submessage_arena);
    }
    set_has_documents();
    target_type_.documents_ = documents;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Target.documents)
}
void Target::set_allocated_read_time(::google::protobuf::Timestamp* read_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_resume_type();
  if (read_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    resume_type_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Target.read_time)
}
void Target::clear_read_time() {
  if (has_read_time()) {
    delete resume_type_.read_time_;
    clear_has_resume_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Target::kQueryFieldNumber;
const int Target::kDocumentsFieldNumber;
const int Target::kResumeTokenFieldNumber;
const int Target::kReadTimeFieldNumber;
const int Target::kTargetIdFieldNumber;
const int Target::kOnceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Target::Target()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.Target)
}
Target::Target(const Target& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&once_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(once_));
  clear_has_target_type();
  switch (from.target_type_case()) {
    case kQuery: {
      mutable_query()->::google::firestore::v1::Target_QueryTarget::MergeFrom(from.query());
      break;
    }
    case kDocuments: {
      mutable_documents()->::google::firestore::v1::Target_DocumentsTarget::MergeFrom(from.documents());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_resume_type();
  switch (from.resume_type_case()) {
    case kResumeToken: {
      set_resume_token(from.resume_token());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case RESUME_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.Target)
}

void Target::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Target_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&once_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(once_));
  clear_has_target_type();
  clear_has_resume_type();
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.Target)
  SharedDtor();
}

void Target::SharedDtor() {
  if (has_target_type()) {
    clear_target_type();
  }
  if (has_resume_type()) {
    clear_resume_type();
  }
}

void Target::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Target& Target::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Target_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void Target::clear_target_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.Target)
  switch (target_type_case()) {
    case kQuery: {
      delete target_type_.query_;
      break;
    }
    case kDocuments: {
      delete target_type_.documents_;
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_TYPE_NOT_SET;
}

void Target::clear_resume_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.Target)
  switch (resume_type_case()) {
    case kResumeToken: {
      resume_type_.resume_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kReadTime: {
      delete resume_type_.read_time_;
      break;
    }
    case RESUME_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = RESUME_TYPE_NOT_SET;
}


void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.Target)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&once_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(once_));
  clear_target_type();
  clear_resume_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Target::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Target*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.firestore.v1.Target.QueryTarget query = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::Target_QueryTarget::_InternalParse;
        object = msg->mutable_query();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.firestore.v1.Target.DocumentsTarget documents = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::firestore::v1::Target_DocumentsTarget::_InternalParse;
        object = msg->mutable_documents();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes resume_token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_resume_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 target_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_target_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool once = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_once(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Timestamp read_time = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_read_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.Target)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.firestore.v1.Target.QueryTarget query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.firestore.v1.Target.DocumentsTarget documents = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes resume_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resume_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool once = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &once_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp read_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.Target)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.Target)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.Target)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Target.QueryTarget query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::query(this), output);
  }

  // .google.firestore.v1.Target.DocumentsTarget documents = 3;
  if (has_documents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::documents(this), output);
  }

  // bytes resume_token = 4;
  if (has_resume_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->resume_token(), output);
  }

  // int32 target_id = 5;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->target_id(), output);
  }

  // bool once = 6;
  if (this->once() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->once(), output);
  }

  // .google.protobuf.Timestamp read_time = 11;
  if (has_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::read_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.Target)
}

::google::protobuf::uint8* Target::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.Target)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Target.QueryTarget query = 2;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::query(this), target);
  }

  // .google.firestore.v1.Target.DocumentsTarget documents = 3;
  if (has_documents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::documents(this), target);
  }

  // bytes resume_token = 4;
  if (has_resume_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->resume_token(), target);
  }

  // int32 target_id = 5;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->target_id(), target);
  }

  // bool once = 6;
  if (this->once() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->once(), target);
  }

  // .google.protobuf.Timestamp read_time = 11;
  if (has_read_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::read_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.Target)
  return target;
}

size_t Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.Target)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 target_id = 5;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_id());
  }

  // bool once = 6;
  if (this->once() != 0) {
    total_size += 1 + 1;
  }

  switch (target_type_case()) {
    // .google.firestore.v1.Target.QueryTarget query = 2;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_type_.query_);
      break;
    }
    // .google.firestore.v1.Target.DocumentsTarget documents = 3;
    case kDocuments: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_type_.documents_);
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  switch (resume_type_case()) {
    // bytes resume_token = 4;
    case kResumeToken: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resume_token());
      break;
    }
    // .google.protobuf.Timestamp read_time = 11;
    case kReadTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resume_type_.read_time_);
      break;
    }
    case RESUME_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Target::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.Target)
  GOOGLE_DCHECK_NE(&from, this);
  const Target* source =
      ::google::protobuf::DynamicCastToGenerated<Target>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.Target)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.Target)
    MergeFrom(*source);
  }
}

void Target::MergeFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.Target)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
  if (from.once() != 0) {
    set_once(from.once());
  }
  switch (from.target_type_case()) {
    case kQuery: {
      mutable_query()->::google::firestore::v1::Target_QueryTarget::MergeFrom(from.query());
      break;
    }
    case kDocuments: {
      mutable_documents()->::google::firestore::v1::Target_DocumentsTarget::MergeFrom(from.documents());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.resume_type_case()) {
    case kResumeToken: {
      set_resume_token(from.resume_token());
      break;
    }
    case kReadTime: {
      mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
      break;
    }
    case RESUME_TYPE_NOT_SET: {
      break;
    }
  }
}

void Target::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  return true;
}

void Target::Swap(Target* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Target::InternalSwap(Target* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_id_, other->target_id_);
  swap(once_, other->once_);
  swap(target_type_, other->target_type_);
  swap(resume_type_, other->resume_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::google::protobuf::Metadata Target::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TargetChange::InitAsDefaultInstance() {
  ::google::firestore::v1::_TargetChange_default_instance_._instance.get_mutable()->cause_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::google::firestore::v1::_TargetChange_default_instance_._instance.get_mutable()->read_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class TargetChange::HasBitSetters {
 public:
  static const ::google::rpc::Status& cause(const TargetChange* msg);
  static const ::google::protobuf::Timestamp& read_time(const TargetChange* msg);
};

const ::google::rpc::Status&
TargetChange::HasBitSetters::cause(const TargetChange* msg) {
  return *msg->cause_;
}
const ::google::protobuf::Timestamp&
TargetChange::HasBitSetters::read_time(const TargetChange* msg) {
  return *msg->read_time_;
}
void TargetChange::clear_cause() {
  if (GetArenaNoVirtual() == nullptr && cause_ != nullptr) {
    delete cause_;
  }
  cause_ = nullptr;
}
void TargetChange::clear_read_time() {
  if (GetArenaNoVirtual() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetChange::kTargetChangeTypeFieldNumber;
const int TargetChange::kTargetIdsFieldNumber;
const int TargetChange::kCauseFieldNumber;
const int TargetChange::kResumeTokenFieldNumber;
const int TargetChange::kReadTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetChange::TargetChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.TargetChange)
}
TargetChange::TargetChange(const TargetChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      target_ids_(from.target_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resume_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resume_token().size() > 0) {
    resume_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resume_token_);
  }
  if (from.has_cause()) {
    cause_ = new ::google::rpc::Status(*from.cause_);
  } else {
    cause_ = nullptr;
  }
  if (from.has_read_time()) {
    read_time_ = new ::google::protobuf::Timestamp(*from.read_time_);
  } else {
    read_time_ = nullptr;
  }
  target_change_type_ = from.target_change_type_;
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.TargetChange)
}

void TargetChange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TargetChange_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  resume_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cause_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_change_type_) -
      reinterpret_cast<char*>(&cause_)) + sizeof(target_change_type_));
}

TargetChange::~TargetChange() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.TargetChange)
  SharedDtor();
}

void TargetChange::SharedDtor() {
  resume_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cause_;
  if (this != internal_default_instance()) delete read_time_;
}

void TargetChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetChange& TargetChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TargetChange_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void TargetChange::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.TargetChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_ids_.Clear();
  resume_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cause_ != nullptr) {
    delete cause_;
  }
  cause_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
  target_change_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TargetChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TargetChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.firestore.v1.TargetChange.TargetChangeType target_change_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_target_change_type(static_cast<::google::firestore::v1::TargetChange_TargetChangeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 target_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_target_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_target_ids(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // .google.rpc.Status cause = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::rpc::Status::_InternalParse;
        object = msg->mutable_cause();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes resume_token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_resume_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp read_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_read_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TargetChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.TargetChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.firestore.v1.TargetChange.TargetChangeType target_change_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_target_change_type(static_cast< ::google::firestore::v1::TargetChange_TargetChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 target_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_target_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_target_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status cause = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cause()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes resume_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resume_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp read_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.TargetChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.TargetChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TargetChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.TargetChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.TargetChange.TargetChangeType target_change_type = 1;
  if (this->target_change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->target_change_type(), output);
  }

  // repeated int32 target_ids = 2;
  if (this->target_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_target_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->target_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->target_ids(i), output);
  }

  // .google.rpc.Status cause = 3;
  if (this->has_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cause(this), output);
  }

  // bytes resume_token = 4;
  if (this->resume_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->resume_token(), output);
  }

  // .google.protobuf.Timestamp read_time = 6;
  if (this->has_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::read_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.TargetChange)
}

::google::protobuf::uint8* TargetChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.TargetChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.TargetChange.TargetChangeType target_change_type = 1;
  if (this->target_change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->target_change_type(), target);
  }

  // repeated int32 target_ids = 2;
  if (this->target_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _target_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->target_ids_, target);
  }

  // .google.rpc.Status cause = 3;
  if (this->has_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cause(this), target);
  }

  // bytes resume_token = 4;
  if (this->resume_token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->resume_token(), target);
  }

  // .google.protobuf.Timestamp read_time = 6;
  if (this->has_read_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::read_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.TargetChange)
  return target;
}

size_t TargetChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.TargetChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->target_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _target_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes resume_token = 4;
  if (this->resume_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->resume_token());
  }

  // .google.rpc.Status cause = 3;
  if (this->has_cause()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cause_);
  }

  // .google.protobuf.Timestamp read_time = 6;
  if (this->has_read_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *read_time_);
  }

  // .google.firestore.v1.TargetChange.TargetChangeType target_change_type = 1;
  if (this->target_change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_change_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.TargetChange)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetChange* source =
      ::google::protobuf::DynamicCastToGenerated<TargetChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.TargetChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.TargetChange)
    MergeFrom(*source);
  }
}

void TargetChange::MergeFrom(const TargetChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.TargetChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_ids_.MergeFrom(from.target_ids_);
  if (from.resume_token().size() > 0) {

    resume_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resume_token_);
  }
  if (from.has_cause()) {
    mutable_cause()->::google::rpc::Status::MergeFrom(from.cause());
  }
  if (from.has_read_time()) {
    mutable_read_time()->::google::protobuf::Timestamp::MergeFrom(from.read_time());
  }
  if (from.target_change_type() != 0) {
    set_target_change_type(from.target_change_type());
  }
}

void TargetChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.TargetChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetChange::CopyFrom(const TargetChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.TargetChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetChange::IsInitialized() const {
  return true;
}

void TargetChange::Swap(TargetChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetChange::InternalSwap(TargetChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  target_ids_.InternalSwap(&other->target_ids_);
  resume_token_.Swap(&other->resume_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cause_, other->cause_);
  swap(read_time_, other->read_time_);
  swap(target_change_type_, other->target_change_type_);
}

::google::protobuf::Metadata TargetChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListCollectionIdsRequest::InitAsDefaultInstance() {
}
class ListCollectionIdsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListCollectionIdsRequest::kParentFieldNumber;
const int ListCollectionIdsRequest::kPageSizeFieldNumber;
const int ListCollectionIdsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCollectionIdsRequest::ListCollectionIdsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.ListCollectionIdsRequest)
}
ListCollectionIdsRequest::ListCollectionIdsRequest(const ListCollectionIdsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListCollectionIdsRequest)
}

void ListCollectionIdsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListCollectionIdsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListCollectionIdsRequest::~ListCollectionIdsRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListCollectionIdsRequest)
  SharedDtor();
}

void ListCollectionIdsRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListCollectionIdsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCollectionIdsRequest& ListCollectionIdsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListCollectionIdsRequest_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void ListCollectionIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListCollectionIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListCollectionIdsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListCollectionIdsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListCollectionIdsRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string page_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListCollectionIdsRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListCollectionIdsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.ListCollectionIdsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListCollectionIdsRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListCollectionIdsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.ListCollectionIdsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.ListCollectionIdsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListCollectionIdsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.ListCollectionIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.ListCollectionIdsRequest)
}

::google::protobuf::uint8* ListCollectionIdsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListCollectionIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListCollectionIdsRequest)
  return target;
}

size_t ListCollectionIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListCollectionIdsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCollectionIdsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.ListCollectionIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCollectionIdsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListCollectionIdsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.ListCollectionIdsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.ListCollectionIdsRequest)
    MergeFrom(*source);
  }
}

void ListCollectionIdsRequest::MergeFrom(const ListCollectionIdsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListCollectionIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListCollectionIdsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.ListCollectionIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCollectionIdsRequest::CopyFrom(const ListCollectionIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListCollectionIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollectionIdsRequest::IsInitialized() const {
  return true;
}

void ListCollectionIdsRequest::Swap(ListCollectionIdsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListCollectionIdsRequest::InternalSwap(ListCollectionIdsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListCollectionIdsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListCollectionIdsResponse::InitAsDefaultInstance() {
}
class ListCollectionIdsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListCollectionIdsResponse::kCollectionIdsFieldNumber;
const int ListCollectionIdsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCollectionIdsResponse::ListCollectionIdsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.v1.ListCollectionIdsResponse)
}
ListCollectionIdsResponse::ListCollectionIdsResponse(const ListCollectionIdsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      collection_ids_(from.collection_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListCollectionIdsResponse)
}

void ListCollectionIdsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListCollectionIdsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListCollectionIdsResponse::~ListCollectionIdsResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListCollectionIdsResponse)
  SharedDtor();
}

void ListCollectionIdsResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListCollectionIdsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCollectionIdsResponse& ListCollectionIdsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListCollectionIdsResponse_google_2ffirestore_2fv1_2ffirestore_2eproto.base);
  return *internal_default_instance();
}


void ListCollectionIdsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListCollectionIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_ids_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListCollectionIdsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListCollectionIdsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string collection_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListCollectionIdsResponse.collection_ids");
          object = msg->add_collection_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.firestore.v1.ListCollectionIdsResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListCollectionIdsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.firestore.v1.ListCollectionIdsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string collection_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_collection_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection_ids(this->collection_ids_size() - 1).data(),
            static_cast<int>(this->collection_ids(this->collection_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListCollectionIdsResponse.collection_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.firestore.v1.ListCollectionIdsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.firestore.v1.ListCollectionIdsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.firestore.v1.ListCollectionIdsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListCollectionIdsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.firestore.v1.ListCollectionIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string collection_ids = 1;
  for (int i = 0, n = this->collection_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_ids(i).data(), static_cast<int>(this->collection_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsResponse.collection_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collection_ids(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.firestore.v1.ListCollectionIdsResponse)
}

::google::protobuf::uint8* ListCollectionIdsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListCollectionIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string collection_ids = 1;
  for (int i = 0, n = this->collection_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_ids(i).data(), static_cast<int>(this->collection_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsResponse.collection_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->collection_ids(i), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListCollectionIdsResponse)
  return target;
}

size_t ListCollectionIdsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListCollectionIdsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->collection_ids_size());
  for (int i = 0, n = this->collection_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->collection_ids(i));
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCollectionIdsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.v1.ListCollectionIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCollectionIdsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListCollectionIdsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.v1.ListCollectionIdsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.v1.ListCollectionIdsResponse)
    MergeFrom(*source);
  }
}

void ListCollectionIdsResponse::MergeFrom(const ListCollectionIdsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListCollectionIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_ids_.MergeFrom(from.collection_ids_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListCollectionIdsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.v1.ListCollectionIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCollectionIdsResponse::CopyFrom(const ListCollectionIdsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListCollectionIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollectionIdsResponse::IsInitialized() const {
  return true;
}

void ListCollectionIdsResponse::Swap(ListCollectionIdsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListCollectionIdsResponse::InternalSwap(ListCollectionIdsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collection_ids_.InternalSwap(CastToBase(&other->collection_ids_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListCollectionIdsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return ::file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace firestore
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::firestore::v1::GetDocumentRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::GetDocumentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::GetDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListDocumentsRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::ListDocumentsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::ListDocumentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListDocumentsResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::ListDocumentsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::ListDocumentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::CreateDocumentRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::CreateDocumentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::CreateDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::UpdateDocumentRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::UpdateDocumentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::UpdateDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::DeleteDocumentRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::DeleteDocumentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::DeleteDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::BatchGetDocumentsRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::BatchGetDocumentsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::BatchGetDocumentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::BatchGetDocumentsResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::BatchGetDocumentsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::BatchGetDocumentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::BeginTransactionRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::BeginTransactionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::BeginTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::BeginTransactionResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::BeginTransactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::BeginTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::CommitRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::CommitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::CommitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::CommitResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::CommitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::CommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::RollbackRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::RollbackRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::RollbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::RunQueryRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::RunQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::RunQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::RunQueryResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::RunQueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::RunQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::WriteRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::WriteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::WriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::WriteResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::WriteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::WriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListenRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::ListenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::ListenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListenResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::ListenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::ListenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::Target_DocumentsTarget* Arena::CreateMaybeMessage< ::google::firestore::v1::Target_DocumentsTarget >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::Target_DocumentsTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::Target_QueryTarget* Arena::CreateMaybeMessage< ::google::firestore::v1::Target_QueryTarget >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::Target_QueryTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::Target* Arena::CreateMaybeMessage< ::google::firestore::v1::Target >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::Target >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::TargetChange* Arena::CreateMaybeMessage< ::google::firestore::v1::TargetChange >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::TargetChange >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListCollectionIdsRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::ListCollectionIdsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::ListCollectionIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListCollectionIdsResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::ListCollectionIdsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::v1::ListCollectionIdsResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
